
new_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029fc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002bd4  08002bd4  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be4  08002be4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002be4  08002be4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be4  08002be4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002bf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002bf8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a229  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f5  00000000  00000000  0002a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  0002baa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000932  00000000  00000000  0002c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c74f  00000000  00000000  0002cfc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000beb7  00000000  00000000  00049711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb8b0  00000000  00000000  000555c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031f0  00000000  00000000  00110e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00114068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002bbc 	.word	0x08002bbc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002bbc 	.word	0x08002bbc

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fac0 	bl	80007a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f853 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f965 	bl	80004f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800022a:	f000 f899 	bl	8000360 <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800022e:	2100      	movs	r1, #0
 8000230:	4825      	ldr	r0, [pc, #148]	; (80002c8 <main+0xb0>)
 8000232:	f001 fc1f 	bl	8001a74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000236:	2104      	movs	r1, #4
 8000238:	4823      	ldr	r0, [pc, #140]	; (80002c8 <main+0xb0>)
 800023a:	f001 fc1b 	bl	8001a74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800023e:	2108      	movs	r1, #8
 8000240:	4821      	ldr	r0, [pc, #132]	; (80002c8 <main+0xb0>)
 8000242:	f001 fc17 	bl	8001a74 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint16_t pwmA = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	80fb      	strh	r3, [r7, #6]
  uint16_t pwmB = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	80bb      	strh	r3, [r7, #4]
  uint16_t pwmC = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	807b      	strh	r3, [r7, #2]


  uint16_t pwmIncrement = 10;
 8000252:	230a      	movs	r3, #10
 8000254:	803b      	strh	r3, [r7, #0]
  while (1)
   {
     // PWM değerlerini ayarlayın
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmA);
 8000256:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <main+0xb0>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	88fa      	ldrh	r2, [r7, #6]
 800025c:	635a      	str	r2, [r3, #52]	; 0x34
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwmB);
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <main+0xb0>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	88ba      	ldrh	r2, [r7, #4]
 8000264:	639a      	str	r2, [r3, #56]	; 0x38
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwmC);
 8000266:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <main+0xb0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	887a      	ldrh	r2, [r7, #2]
 800026c:	63da      	str	r2, [r3, #60]	; 0x3c

     // Motor dönüş algoritması
     // Bu sadece basit bir örnektir, gerçek bir motor kontrol algoritması daha karmaşıktır
     // Burada, her bir fazın PWM değeri sırayla arttırılır ve dönüş yönü değiştirilir
     pwmA += pwmIncrement;
 800026e:	88fa      	ldrh	r2, [r7, #6]
 8000270:	883b      	ldrh	r3, [r7, #0]
 8000272:	4413      	add	r3, r2
 8000274:	80fb      	strh	r3, [r7, #6]
     pwmB += pwmIncrement;
 8000276:	88ba      	ldrh	r2, [r7, #4]
 8000278:	883b      	ldrh	r3, [r7, #0]
 800027a:	4413      	add	r3, r2
 800027c:	80bb      	strh	r3, [r7, #4]
     pwmC += pwmIncrement;
 800027e:	887a      	ldrh	r2, [r7, #2]
 8000280:	883b      	ldrh	r3, [r7, #0]
 8000282:	4413      	add	r3, r2
 8000284:	807b      	strh	r3, [r7, #2]

     if (pwmA >= 100)
 8000286:	88fb      	ldrh	r3, [r7, #6]
 8000288:	2b63      	cmp	r3, #99	; 0x63
 800028a:	d906      	bls.n	800029a <main+0x82>
     {
       pwmA = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	80fb      	strh	r3, [r7, #6]
       pwmB = 100;
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	80bb      	strh	r3, [r7, #4]
       pwmC = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	807b      	strh	r3, [r7, #2]
 8000298:	e012      	b.n	80002c0 <main+0xa8>
     }
     else if (pwmB >= 100)
 800029a:	88bb      	ldrh	r3, [r7, #4]
 800029c:	2b63      	cmp	r3, #99	; 0x63
 800029e:	d906      	bls.n	80002ae <main+0x96>
     {
       pwmA = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	80fb      	strh	r3, [r7, #6]
       pwmB = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	80bb      	strh	r3, [r7, #4]
       pwmC = 100;
 80002a8:	2364      	movs	r3, #100	; 0x64
 80002aa:	807b      	strh	r3, [r7, #2]
 80002ac:	e008      	b.n	80002c0 <main+0xa8>
     }
     else if (pwmC >= 100)
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	2b63      	cmp	r3, #99	; 0x63
 80002b2:	d905      	bls.n	80002c0 <main+0xa8>
     {
       pwmA = 100;
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	80fb      	strh	r3, [r7, #6]
       pwmB = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	80bb      	strh	r3, [r7, #4]
       pwmC = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	807b      	strh	r3, [r7, #2]
     // Burada istediğiniz işlemleri gerçekleştirebilirsiniz.
     // Motorunuzun kontrol algoritmasını uygulayabilirsiniz.

     // İşlem hızını kontrol etmek için bir bekleme süresi eklemek isteyebilirsiniz.
     // Örneğin: HAL_Delay(100); // 100 ms bekleme
     HAL_Delay(100);
 80002c0:	2064      	movs	r0, #100	; 0x64
 80002c2:	f000 fadf 	bl	8000884 <HAL_Delay>
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwmA);
 80002c6:	e7c6      	b.n	8000256 <main+0x3e>
 80002c8:	20000028 	.word	0x20000028

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b094      	sub	sp, #80	; 0x50
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2238      	movs	r2, #56	; 0x38
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 fc42 	bl	8002b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002ee:	2000      	movs	r0, #0
 80002f0:	f000 fd68 	bl	8000dc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f4:	2301      	movs	r3, #1
 80002f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	2303      	movs	r3, #3
 8000304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000306:	2306      	movs	r3, #6
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800030a:	2355      	movs	r3, #85	; 0x55
 800030c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000316:	2302      	movs	r3, #2
 8000318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	4618      	mov	r0, r3
 8000320:	f000 fdf4 	bl	8000f0c <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800032a:	f000 f953 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2303      	movs	r3, #3
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2104      	movs	r1, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f8f8 	bl	800153c <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000352:	f000 f93f 	bl	80005d4 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3750      	adds	r7, #80	; 0x50
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b09c      	sub	sp, #112	; 0x70
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000366:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000374:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000380:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
 8000390:	615a      	str	r2, [r3, #20]
 8000392:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2234      	movs	r2, #52	; 0x34
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fbe2 	bl	8002b64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a0:	4b52      	ldr	r3, [pc, #328]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003a2:	4a53      	ldr	r2, [pc, #332]	; (80004f0 <MX_TIM1_Init+0x190>)
 80003a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003a6:	4b51      	ldr	r3, [pc, #324]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ac:	4b4f      	ldr	r3, [pc, #316]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003b2:	4b4e      	ldr	r3, [pc, #312]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ba:	4b4c      	ldr	r3, [pc, #304]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003c0:	4b4a      	ldr	r3, [pc, #296]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c6:	4b49      	ldr	r3, [pc, #292]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003cc:	4847      	ldr	r0, [pc, #284]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003ce:	f001 fa99 	bl	8001904 <HAL_TIM_Base_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80003d8:	f000 f8fc 	bl	80005d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003e6:	4619      	mov	r1, r3
 80003e8:	4840      	ldr	r0, [pc, #256]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003ea:	f001 fd57 	bl	8001e9c <HAL_TIM_ConfigClockSource>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80003f4:	f000 f8ee 	bl	80005d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003f8:	483c      	ldr	r0, [pc, #240]	; (80004ec <MX_TIM1_Init+0x18c>)
 80003fa:	f001 fada 	bl	80019b2 <HAL_TIM_PWM_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000404:	f000 f8e6 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000408:	2300      	movs	r3, #0
 800040a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800040c:	2300      	movs	r3, #0
 800040e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000410:	2300      	movs	r3, #0
 8000412:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000414:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000418:	4619      	mov	r1, r3
 800041a:	4834      	ldr	r0, [pc, #208]	; (80004ec <MX_TIM1_Init+0x18c>)
 800041c:	f002 fa80 	bl	8002920 <HAL_TIMEx_MasterConfigSynchronization>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000426:	f000 f8d5 	bl	80005d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800042a:	2360      	movs	r3, #96	; 0x60
 800042c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000432:	2302      	movs	r3, #2
 8000434:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000436:	2300      	movs	r3, #0
 8000438:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800043e:	2300      	movs	r3, #0
 8000440:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000442:	2300      	movs	r3, #0
 8000444:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000446:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800044a:	2200      	movs	r2, #0
 800044c:	4619      	mov	r1, r3
 800044e:	4827      	ldr	r0, [pc, #156]	; (80004ec <MX_TIM1_Init+0x18c>)
 8000450:	f001 fc10 	bl	8001c74 <HAL_TIM_PWM_ConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800045a:	f000 f8bb 	bl	80005d4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045e:	2300      	movs	r3, #0
 8000460:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000462:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000466:	2204      	movs	r2, #4
 8000468:	4619      	mov	r1, r3
 800046a:	4820      	ldr	r0, [pc, #128]	; (80004ec <MX_TIM1_Init+0x18c>)
 800046c:	f001 fc02 	bl	8001c74 <HAL_TIM_PWM_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8000476:	f000 f8ad 	bl	80005d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800047a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800047e:	2208      	movs	r2, #8
 8000480:	4619      	mov	r1, r3
 8000482:	481a      	ldr	r0, [pc, #104]	; (80004ec <MX_TIM1_Init+0x18c>)
 8000484:	f001 fbf6 	bl	8001c74 <HAL_TIM_PWM_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 800048e:	f000 f8a1 	bl	80005d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004c2:	2300      	movs	r3, #0
 80004c4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c6:	2300      	movs	r3, #0
 80004c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4619      	mov	r1, r3
 80004ce:	4807      	ldr	r0, [pc, #28]	; (80004ec <MX_TIM1_Init+0x18c>)
 80004d0:	f002 faa8 	bl	8002a24 <HAL_TIMEx_ConfigBreakDeadTime>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 80004da:	f000 f87b 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <MX_TIM1_Init+0x18c>)
 80004e0:	f000 f8c2 	bl	8000668 <HAL_TIM_MspPostInit>

}
 80004e4:	bf00      	nop
 80004e6:	3770      	adds	r7, #112	; 0x70
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000028 	.word	0x20000028
 80004f0:	40012c00 	.word	0x40012c00

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050a:	4b30      	ldr	r3, [pc, #192]	; (80005cc <MX_GPIO_Init+0xd8>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a2f      	ldr	r2, [pc, #188]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000510:	f043 0320 	orr.w	r3, r3, #32
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0320 	and.w	r3, r3, #32
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a29      	ldr	r2, [pc, #164]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b27      	ldr	r3, [pc, #156]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <MX_GPIO_Init+0xd8>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a23      	ldr	r2, [pc, #140]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055e:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_GPIO_Init+0xd8>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000570:	4817      	ldr	r0, [pc, #92]	; (80005d0 <MX_GPIO_Init+0xdc>)
 8000572:	f000 fc0f 	bl	8000d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f000 fc08 	bl	8000d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000584:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_GPIO_Init+0xdc>)
 800059e:	f000 fa77 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80005a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f000 fa67 	bl	8000a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	; 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000400 	.word	0x48000400

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	e7fe      	b.n	80005dc <Error_Handler+0x8>
	...

080005e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_MspInit+0x44>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <HAL_MspInit+0x44>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6613      	str	r3, [r2, #96]	; 0x60
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_MspInit+0x44>)
 80005f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <HAL_MspInit+0x44>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6593      	str	r3, [r2, #88]	; 0x58
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_MspInit+0x44>)
 800060c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <HAL_TIM_Base_MspInit+0x38>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d10b      	bne.n	8000652 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_TIM_Base_MspInit+0x3c>)
 800063c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <HAL_TIM_Base_MspInit+0x3c>)
 8000640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000644:	6613      	str	r3, [r2, #96]	; 0x60
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <HAL_TIM_Base_MspInit+0x3c>)
 8000648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40012c00 	.word	0x40012c00
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	; (80006cc <HAL_TIM_MspPostInit+0x64>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d11b      	bne.n	80006c2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_TIM_MspPostInit+0x68>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <HAL_TIM_MspPostInit+0x68>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_TIM_MspPostInit+0x68>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006a2:	2307      	movs	r3, #7
 80006a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <HAL_TIM_MspPostInit+0x6c>)
 80006be:	f000 f9e7 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40012c00 	.word	0x40012c00
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000800 	.word	0x48000800

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 f890 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <SystemInit+0x20>)
 8000732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <SystemInit+0x20>)
 8000738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800073c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000752:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490e      	ldr	r1, [pc, #56]	; (8000790 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0b      	ldr	r4, [pc, #44]	; (800079c <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800077a:	f7ff ffd7 	bl	800072c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077e:	f002 f9f9 	bl	8002b74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000782:	f7ff fd49 	bl	8000218 <main>

08000786 <LoopForever>:

LoopForever:
    b LoopForever
 8000786:	e7fe      	b.n	8000786 <LoopForever>
  ldr   r0, =_estack
 8000788:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000794:	08002bec 	.word	0x08002bec
  ldr r2, =_sbss
 8000798:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800079c:	20000078 	.word	0x20000078

080007a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_2_IRQHandler>

080007a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f93d 	bl	8000a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 f80e 	bl	80007d4 <HAL_InitTick>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	e001      	b.n	80007c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007c4:	f7ff ff0c 	bl	80005e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007c8:	79fb      	ldrb	r3, [r7, #7]

}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <HAL_InitTick+0x68>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d022      	beq.n	800082e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_InitTick+0x6c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_InitTick+0x68>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80007f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f93a 	bl	8000a76 <HAL_SYSTICK_Config>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d10f      	bne.n	8000828 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b0f      	cmp	r3, #15
 800080c:	d809      	bhi.n	8000822 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080e:	2200      	movs	r2, #0
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	f04f 30ff 	mov.w	r0, #4294967295
 8000816:	f000 f914 	bl	8000a42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_InitTick+0x70>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e007      	b.n	8000832 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e004      	b.n	8000832 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e001      	b.n	8000832 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000008 	.word	0x20000008
 8000840:	20000000 	.word	0x20000000
 8000844:	20000004 	.word	0x20000004

08000848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_IncTick+0x1c>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_IncTick+0x20>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4413      	add	r3, r2
 8000856:	4a03      	ldr	r2, [pc, #12]	; (8000864 <HAL_IncTick+0x1c>)
 8000858:	6013      	str	r3, [r2, #0]
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	20000074 	.word	0x20000074
 8000868:	20000008 	.word	0x20000008

0800086c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_GetTick+0x14>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000074 	.word	0x20000074

08000884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800088c:	f7ff ffee 	bl	800086c <HAL_GetTick>
 8000890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800089c:	d004      	beq.n	80008a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_Delay+0x40>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	4413      	add	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a8:	bf00      	nop
 80008aa:	f7ff ffdf 	bl	800086c <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d8f7      	bhi.n	80008aa <HAL_Delay+0x26>
  {
  }
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000008 	.word	0x20000008

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f8:	d301      	bcc.n	80009fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00f      	b.n	8000a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <SysTick_Config+0x40>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a06:	210f      	movs	r1, #15
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f7ff ff8e 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SysTick_Config+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Config+0x40>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff47 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff5e 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff90 	bl	8000980 <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5f 	bl	800092c <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffb2 	bl	80009e8 <SysTick_Config>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a9e:	e15a      	b.n	8000d56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 814c 	beq.w	8000d50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d005      	beq.n	8000ad0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d130      	bne.n	8000b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2203      	movs	r2, #3
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b06:	2201      	movs	r2, #1
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	f003 0201 	and.w	r2, r3, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d017      	beq.n	8000b6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d123      	bne.n	8000bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	08da      	lsrs	r2, r3, #3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3208      	adds	r2, #8
 8000b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	220f      	movs	r2, #15
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	08da      	lsrs	r2, r3, #3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3208      	adds	r2, #8
 8000bbc:	6939      	ldr	r1, [r7, #16]
 8000bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0203 	and.w	r2, r3, #3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 80a6 	beq.w	8000d50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c04:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <HAL_GPIO_Init+0x2e4>)
 8000c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c08:	4a5a      	ldr	r2, [pc, #360]	; (8000d74 <HAL_GPIO_Init+0x2e4>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c10:	4b58      	ldr	r3, [pc, #352]	; (8000d74 <HAL_GPIO_Init+0x2e4>)
 8000c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c1c:	4a56      	ldr	r2, [pc, #344]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	220f      	movs	r2, #15
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c46:	d01f      	beq.n	8000c88 <HAL_GPIO_Init+0x1f8>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a4c      	ldr	r2, [pc, #304]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d019      	beq.n	8000c84 <HAL_GPIO_Init+0x1f4>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a4b      	ldr	r2, [pc, #300]	; (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d013      	beq.n	8000c80 <HAL_GPIO_Init+0x1f0>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a4a      	ldr	r2, [pc, #296]	; (8000d84 <HAL_GPIO_Init+0x2f4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d00d      	beq.n	8000c7c <HAL_GPIO_Init+0x1ec>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <HAL_GPIO_Init+0x2f8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d007      	beq.n	8000c78 <HAL_GPIO_Init+0x1e8>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a48      	ldr	r2, [pc, #288]	; (8000d8c <HAL_GPIO_Init+0x2fc>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d101      	bne.n	8000c74 <HAL_GPIO_Init+0x1e4>
 8000c70:	2305      	movs	r3, #5
 8000c72:	e00a      	b.n	8000c8a <HAL_GPIO_Init+0x1fa>
 8000c74:	2306      	movs	r3, #6
 8000c76:	e008      	b.n	8000c8a <HAL_GPIO_Init+0x1fa>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1fa>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1fa>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1fa>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1fa>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c9a:	4937      	ldr	r1, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ca8:	4b39      	ldr	r3, [pc, #228]	; (8000d90 <HAL_GPIO_Init+0x300>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ccc:	4a30      	ldr	r2, [pc, #192]	; (8000d90 <HAL_GPIO_Init+0x300>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cd2:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <HAL_GPIO_Init+0x300>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cf6:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <HAL_GPIO_Init+0x300>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <HAL_GPIO_Init+0x300>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d20:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_GPIO_Init+0x300>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <HAL_GPIO_Init+0x300>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d4a:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <HAL_GPIO_Init+0x300>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f ae9d 	bne.w	8000aa0 <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	48001000 	.word	0x48001000
 8000d8c:	48001400 	.word	0x48001400
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da4:	787b      	ldrb	r3, [r7, #1]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000daa:	887a      	ldrh	r2, [r7, #2]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db0:	e002      	b.n	8000db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d141      	bne.n	8000e56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dd2:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dde:	d131      	bne.n	8000e44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000de0:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000de6:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df0:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000df8:	4a41      	ldr	r2, [pc, #260]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e00:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2232      	movs	r2, #50	; 0x32
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	4a3f      	ldr	r2, [pc, #252]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	0c9b      	lsrs	r3, r3, #18
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e16:	e002      	b.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2a:	d102      	bne.n	8000e32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f2      	bne.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e32:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3e:	d158      	bne.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e057      	b.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e44:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e4a:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e54:	e04d      	b.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e5c:	d141      	bne.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6a:	d131      	bne.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e84:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2232      	movs	r2, #50	; 0x32
 8000e92:	fb02 f303 	mul.w	r3, r2, r3
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	0c9b      	lsrs	r3, r3, #18
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea2:	e002      	b.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb6:	d102      	bne.n	8000ebe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f2      	bne.n	8000ea4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eca:	d112      	bne.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e011      	b.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ee0:	e007      	b.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40007000 	.word	0x40007000
 8000f04:	20000000 	.word	0x20000000
 8000f08:	431bde83 	.word	0x431bde83

08000f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e306      	b.n	800152c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d075      	beq.n	8001016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f2a:	4b97      	ldr	r3, [pc, #604]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f34:	4b94      	ldr	r3, [pc, #592]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2b0c      	cmp	r3, #12
 8000f42:	d102      	bne.n	8000f4a <HAL_RCC_OscConfig+0x3e>
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d002      	beq.n	8000f50 <HAL_RCC_OscConfig+0x44>
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d10b      	bne.n	8000f68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	4b8d      	ldr	r3, [pc, #564]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d05b      	beq.n	8001014 <HAL_RCC_OscConfig+0x108>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d157      	bne.n	8001014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e2e1      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d106      	bne.n	8000f80 <HAL_RCC_OscConfig+0x74>
 8000f72:	4b85      	ldr	r3, [pc, #532]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a84      	ldr	r2, [pc, #528]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e01d      	b.n	8000fbc <HAL_RCC_OscConfig+0xb0>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x98>
 8000f8a:	4b7f      	ldr	r3, [pc, #508]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a7e      	ldr	r2, [pc, #504]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b7c      	ldr	r3, [pc, #496]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a7b      	ldr	r2, [pc, #492]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e00b      	b.n	8000fbc <HAL_RCC_OscConfig+0xb0>
 8000fa4:	4b78      	ldr	r3, [pc, #480]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a77      	ldr	r2, [pc, #476]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b75      	ldr	r3, [pc, #468]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a74      	ldr	r2, [pc, #464]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fc52 	bl	800086c <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fc4e 	bl	800086c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e2a6      	b.n	800152c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fde:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0xc0>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc3e 	bl	800086c <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fc3a 	bl	800086c <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e292      	b.n	800152c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001006:	4b60      	ldr	r3, [pc, #384]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0xe8>
 8001012:	e000      	b.n	8001016 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d075      	beq.n	800110e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001022:	4b59      	ldr	r3, [pc, #356]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800102c:	4b56      	ldr	r3, [pc, #344]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b0c      	cmp	r3, #12
 800103a:	d102      	bne.n	8001042 <HAL_RCC_OscConfig+0x136>
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d002      	beq.n	8001048 <HAL_RCC_OscConfig+0x13c>
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b04      	cmp	r3, #4
 8001046:	d11f      	bne.n	8001088 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_RCC_OscConfig+0x154>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e265      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	061b      	lsls	r3, r3, #24
 800106e:	4946      	ldr	r1, [pc, #280]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001074:	4b45      	ldr	r3, [pc, #276]	; (800118c <HAL_RCC_OscConfig+0x280>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fbab 	bl	80007d4 <HAL_InitTick>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d043      	beq.n	800110c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e251      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d023      	beq.n	80010d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001090:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a3c      	ldr	r2, [pc, #240]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8001096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fbe6 	bl	800086c <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fbe2 	bl	800086c <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e23a      	b.n	800152c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	061b      	lsls	r3, r3, #24
 80010d0:	492d      	ldr	r1, [pc, #180]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	604b      	str	r3, [r1, #4]
 80010d6:	e01a      	b.n	800110e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2a      	ldr	r2, [pc, #168]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 80010de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e4:	f7ff fbc2 	bl	800086c <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ec:	f7ff fbbe 	bl	800086c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e216      	b.n	800152c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x1e0>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d041      	beq.n	800119e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d01c      	beq.n	800115c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8001124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001128:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001132:	f7ff fb9b 	bl	800086c <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113a:	f7ff fb97 	bl	800086c <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e1ef      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 800114e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0ef      	beq.n	800113a <HAL_RCC_OscConfig+0x22e>
 800115a:	e020      	b.n	800119e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 800115e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_RCC_OscConfig+0x27c>)
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116c:	f7ff fb7e 	bl	800086c <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001172:	e00d      	b.n	8001190 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fb7a 	bl	800086c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d906      	bls.n	8001190 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e1d2      	b.n	800152c <HAL_RCC_OscConfig+0x620>
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001190:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ea      	bne.n	8001174 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80a6 	beq.w	80012f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011b0:	4b84      	ldr	r3, [pc, #528]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_OscConfig+0x2b4>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <HAL_RCC_OscConfig+0x2b6>
 80011c0:	2300      	movs	r3, #0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00d      	beq.n	80011e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b7f      	ldr	r3, [pc, #508]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	4a7e      	ldr	r2, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6593      	str	r3, [r2, #88]	; 0x58
 80011d2:	4b7c      	ldr	r3, [pc, #496]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011de:	2301      	movs	r3, #1
 80011e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e2:	4b79      	ldr	r3, [pc, #484]	; (80013c8 <HAL_RCC_OscConfig+0x4bc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d118      	bne.n	8001220 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ee:	4b76      	ldr	r3, [pc, #472]	; (80013c8 <HAL_RCC_OscConfig+0x4bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a75      	ldr	r2, [pc, #468]	; (80013c8 <HAL_RCC_OscConfig+0x4bc>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb37 	bl	800086c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001202:	f7ff fb33 	bl	800086c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e18b      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001214:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <HAL_RCC_OscConfig+0x4bc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d108      	bne.n	800123a <HAL_RCC_OscConfig+0x32e>
 8001228:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122e:	4a65      	ldr	r2, [pc, #404]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001238:	e024      	b.n	8001284 <HAL_RCC_OscConfig+0x378>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b05      	cmp	r3, #5
 8001240:	d110      	bne.n	8001264 <HAL_RCC_OscConfig+0x358>
 8001242:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001248:	4a5e      	ldr	r2, [pc, #376]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001258:	4a5a      	ldr	r2, [pc, #360]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001262:	e00f      	b.n	8001284 <HAL_RCC_OscConfig+0x378>
 8001264:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126a:	4a56      	ldr	r2, [pc, #344]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127a:	4a52      	ldr	r2, [pc, #328]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d016      	beq.n	80012ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128c:	f7ff faee 	bl	800086c <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001292:	e00a      	b.n	80012aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff faea 	bl	800086c <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e140      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012aa:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80012ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0ed      	beq.n	8001294 <HAL_RCC_OscConfig+0x388>
 80012b8:	e015      	b.n	80012e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ba:	f7ff fad7 	bl	800086c <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c2:	f7ff fad3 	bl	800086c <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e129      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d8:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80012da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ed      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d105      	bne.n	80012f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ec:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	4a34      	ldr	r2, [pc, #208]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80012f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	2b00      	cmp	r3, #0
 8001302:	d03c      	beq.n	800137e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d01c      	beq.n	8001346 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 800130e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001312:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff faa6 	bl	800086c <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001324:	f7ff faa2 	bl	800086c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e0fa      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0ef      	beq.n	8001324 <HAL_RCC_OscConfig+0x418>
 8001344:	e01b      	b.n	800137e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800134c:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001356:	f7ff fa89 	bl	800086c <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800135e:	f7ff fa85 	bl	800086c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e0dd      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 8001372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1ef      	bne.n	800135e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80d1 	beq.w	800152a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b0c      	cmp	r3, #12
 8001392:	f000 808b 	beq.w	80014ac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d15e      	bne.n	800145c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_RCC_OscConfig+0x4b8>)
 80013a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fa5f 	bl	800086c <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b0:	e00c      	b.n	80013cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b2:	f7ff fa5b 	bl	800086c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d905      	bls.n	80013cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e0b3      	b.n	800152c <HAL_RCC_OscConfig+0x620>
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013cc:	4b59      	ldr	r3, [pc, #356]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ec      	bne.n	80013b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d8:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	4b56      	ldr	r3, [pc, #344]	; (8001538 <HAL_RCC_OscConfig+0x62c>)
 80013de:	4013      	ands	r3, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6a11      	ldr	r1, [r2, #32]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013e8:	3a01      	subs	r2, #1
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	4311      	orrs	r1, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80013f2:	0212      	lsls	r2, r2, #8
 80013f4:	4311      	orrs	r1, r2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013fa:	0852      	lsrs	r2, r2, #1
 80013fc:	3a01      	subs	r2, #1
 80013fe:	0552      	lsls	r2, r2, #21
 8001400:	4311      	orrs	r1, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001406:	0852      	lsrs	r2, r2, #1
 8001408:	3a01      	subs	r2, #1
 800140a:	0652      	lsls	r2, r2, #25
 800140c:	4311      	orrs	r1, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001412:	06d2      	lsls	r2, r2, #27
 8001414:	430a      	orrs	r2, r1
 8001416:	4947      	ldr	r1, [pc, #284]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001418:	4313      	orrs	r3, r2
 800141a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800141c:	4b45      	ldr	r3, [pc, #276]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a44      	ldr	r2, [pc, #272]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001426:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001428:	4b42      	ldr	r3, [pc, #264]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a41      	ldr	r2, [pc, #260]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800142e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001432:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fa1a 	bl	800086c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff fa16 	bl	800086c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e06e      	b.n	800152c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x530>
 800145a:	e066      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a34      	ldr	r2, [pc, #208]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001466:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001468:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4a31      	ldr	r2, [pc, #196]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a2e      	ldr	r2, [pc, #184]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 800147a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff f9f2 	bl	800086c <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff f9ee 	bl	800086c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e046      	b.n	800152c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x580>
 80014aa:	e03e      	b.n	800152a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e039      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_RCC_OscConfig+0x628>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0203 	and.w	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d12c      	bne.n	8001526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	3b01      	subs	r3, #1
 80014d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014da:	429a      	cmp	r2, r3
 80014dc:	d123      	bne.n	8001526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d11b      	bne.n	8001526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d113      	bne.n	8001526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	3b01      	subs	r3, #1
 800150c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d109      	bne.n	8001526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	3b01      	subs	r3, #1
 8001520:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	019f800c 	.word	0x019f800c

0800153c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e11e      	b.n	8001792 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001554:	4b91      	ldr	r3, [pc, #580]	; (800179c <HAL_RCC_ClockConfig+0x260>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d910      	bls.n	8001584 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b8e      	ldr	r3, [pc, #568]	; (800179c <HAL_RCC_ClockConfig+0x260>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 020f 	bic.w	r2, r3, #15
 800156a:	498c      	ldr	r1, [pc, #560]	; (800179c <HAL_RCC_ClockConfig+0x260>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b8a      	ldr	r3, [pc, #552]	; (800179c <HAL_RCC_ClockConfig+0x260>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e106      	b.n	8001792 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d073      	beq.n	8001678 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d129      	bne.n	80015ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001598:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0f4      	b.n	8001792 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015a8:	f000 f966 	bl	8001878 <RCC_GetSysClockFreqFromPLLSource>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4a7c      	ldr	r2, [pc, #496]	; (80017a4 <HAL_RCC_ClockConfig+0x268>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d93f      	bls.n	8001636 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015b6:	4b7a      	ldr	r3, [pc, #488]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d033      	beq.n	8001636 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d12f      	bne.n	8001636 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015de:	4a70      	ldr	r2, [pc, #448]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80015e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e024      	b.n	8001636 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d109      	bne.n	8001614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0c6      	b.n	8001792 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001604:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0be      	b.n	8001792 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001614:	f000 f8ce 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001618:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4a61      	ldr	r2, [pc, #388]	; (80017a4 <HAL_RCC_ClockConfig+0x268>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d909      	bls.n	8001636 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001622:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800162a:	4a5d      	ldr	r2, [pc, #372]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001630:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001636:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f023 0203 	bic.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4957      	ldr	r1, [pc, #348]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001648:	f7ff f910 	bl	800086c <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	e00a      	b.n	8001666 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7ff f90c 	bl	800086c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e095      	b.n	8001792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 020c 	and.w	r2, r3, #12
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	429a      	cmp	r2, r3
 8001676:	d1eb      	bne.n	8001650 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001690:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a42      	ldr	r2, [pc, #264]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800169a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016a8:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016b0:	4a3b      	ldr	r2, [pc, #236]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80016b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4936      	ldr	r1, [pc, #216]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
 80016ca:	e008      	b.n	80016de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b80      	cmp	r3, #128	; 0x80
 80016d0:	d105      	bne.n	80016de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4a32      	ldr	r2, [pc, #200]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 80016d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <HAL_RCC_ClockConfig+0x260>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d21d      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_ClockConfig+0x260>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f023 020f 	bic.w	r2, r3, #15
 80016f4:	4929      	ldr	r1, [pc, #164]	; (800179c <HAL_RCC_ClockConfig+0x260>)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016fc:	f7ff f8b6 	bl	800086c <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	e00a      	b.n	800171a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001704:	f7ff f8b2 	bl	800086c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e03b      	b.n	8001792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_RCC_ClockConfig+0x260>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d1ed      	bne.n	8001704 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4917      	ldr	r1, [pc, #92]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490f      	ldr	r1, [pc, #60]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001766:	f000 f825 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_RCC_ClockConfig+0x264>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490c      	ldr	r1, [pc, #48]	; (80017a8 <HAL_RCC_ClockConfig+0x26c>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x270>)
 8001784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x274>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f822 	bl	80007d4 <HAL_InitTick>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40022000 	.word	0x40022000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	04c4b400 	.word	0x04c4b400
 80017a8:	08002bd4 	.word	0x08002bd4
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d102      	bne.n	80017cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	e047      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d102      	bne.n	80017de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017d8:	4b26      	ldr	r3, [pc, #152]	; (8001874 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	e03e      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d136      	bne.n	8001858 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3301      	adds	r3, #1
 8001800:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d10c      	bne.n	8001822 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001808:	4a1a      	ldr	r2, [pc, #104]	; (8001874 <HAL_RCC_GetSysClockFreq+0xc0>)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001810:	4a16      	ldr	r2, [pc, #88]	; (800186c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001812:	68d2      	ldr	r2, [r2, #12]
 8001814:	0a12      	lsrs	r2, r2, #8
 8001816:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
      break;
 8001820:	e00c      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001822:	4a13      	ldr	r2, [pc, #76]	; (8001870 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_RCC_GetSysClockFreq+0xb8>)
 800182c:	68d2      	ldr	r2, [r2, #12]
 800182e:	0a12      	lsrs	r2, r2, #8
 8001830:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	617b      	str	r3, [r7, #20]
      break;
 800183a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_GetSysClockFreq+0xb8>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0e5b      	lsrs	r3, r3, #25
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	3301      	adds	r3, #1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	e001      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800185c:	693b      	ldr	r3, [r7, #16]
}
 800185e:	4618      	mov	r0, r3
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	00f42400 	.word	0x00f42400
 8001874:	016e3600 	.word	0x016e3600

08001878 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d10c      	bne.n	80018b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800189c:	4a17      	ldr	r2, [pc, #92]	; (80018fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018a6:	68d2      	ldr	r2, [r2, #12]
 80018a8:	0a12      	lsrs	r2, r2, #8
 80018aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
    break;
 80018b4:	e00c      	b.n	80018d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018c0:	68d2      	ldr	r2, [r2, #12]
 80018c2:	0a12      	lsrs	r2, r2, #8
 80018c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
    break;
 80018ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0e5b      	lsrs	r3, r3, #25
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000
 80018fc:	016e3600 	.word	0x016e3600
 8001900:	00f42400 	.word	0x00f42400

08001904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e049      	b.n	80019aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7fe fe7c 	bl	8000628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f000 fba4 	bl	8002090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e049      	b.n	8001a58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d106      	bne.n	80019de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f841 	bl	8001a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3304      	adds	r3, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f000 fb4d 	bl	8002090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_TIM_PWM_Start+0x24>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e03c      	b.n	8001b12 <HAL_TIM_PWM_Start+0x9e>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d109      	bne.n	8001ab2 <HAL_TIM_PWM_Start+0x3e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	bf14      	ite	ne
 8001aaa:	2301      	movne	r3, #1
 8001aac:	2300      	moveq	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	e02f      	b.n	8001b12 <HAL_TIM_PWM_Start+0x9e>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d109      	bne.n	8001acc <HAL_TIM_PWM_Start+0x58>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	bf14      	ite	ne
 8001ac4:	2301      	movne	r3, #1
 8001ac6:	2300      	moveq	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	e022      	b.n	8001b12 <HAL_TIM_PWM_Start+0x9e>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b0c      	cmp	r3, #12
 8001ad0:	d109      	bne.n	8001ae6 <HAL_TIM_PWM_Start+0x72>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	e015      	b.n	8001b12 <HAL_TIM_PWM_Start+0x9e>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d109      	bne.n	8001b00 <HAL_TIM_PWM_Start+0x8c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	e008      	b.n	8001b12 <HAL_TIM_PWM_Start+0x9e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e097      	b.n	8001c4a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d104      	bne.n	8001b2a <HAL_TIM_PWM_Start+0xb6>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b28:	e023      	b.n	8001b72 <HAL_TIM_PWM_Start+0xfe>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d104      	bne.n	8001b3a <HAL_TIM_PWM_Start+0xc6>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b38:	e01b      	b.n	8001b72 <HAL_TIM_PWM_Start+0xfe>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d104      	bne.n	8001b4a <HAL_TIM_PWM_Start+0xd6>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b48:	e013      	b.n	8001b72 <HAL_TIM_PWM_Start+0xfe>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d104      	bne.n	8001b5a <HAL_TIM_PWM_Start+0xe6>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b58:	e00b      	b.n	8001b72 <HAL_TIM_PWM_Start+0xfe>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d104      	bne.n	8001b6a <HAL_TIM_PWM_Start+0xf6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b68:	e003      	b.n	8001b72 <HAL_TIM_PWM_Start+0xfe>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 feaa 	bl	80028d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <HAL_TIM_PWM_Start+0x1e0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_TIM_PWM_Start+0x13e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <HAL_TIM_PWM_Start+0x1e4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00e      	beq.n	8001bb2 <HAL_TIM_PWM_Start+0x13e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_TIM_PWM_Start+0x1e8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_TIM_PWM_Start+0x13e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_TIM_PWM_Start+0x1ec>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_TIM_PWM_Start+0x13e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <HAL_TIM_PWM_Start+0x1f0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_PWM_Start+0x142>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_TIM_PWM_Start+0x144>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_TIM_PWM_Start+0x1e0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d018      	beq.n	8001c08 <HAL_TIM_PWM_Start+0x194>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bde:	d013      	beq.n	8001c08 <HAL_TIM_PWM_Start+0x194>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <HAL_TIM_PWM_Start+0x1f4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00e      	beq.n	8001c08 <HAL_TIM_PWM_Start+0x194>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_TIM_PWM_Start+0x1f8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_TIM_PWM_Start+0x194>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_TIM_PWM_Start+0x1e4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_TIM_PWM_Start+0x194>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <HAL_TIM_PWM_Start+0x1e8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d115      	bne.n	8001c34 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_TIM_PWM_Start+0x1fc>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d015      	beq.n	8001c46 <HAL_TIM_PWM_Start+0x1d2>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d011      	beq.n	8001c46 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c32:	e008      	b.n	8001c46 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e000      	b.n	8001c48 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40012c00 	.word	0x40012c00
 8001c58:	40013400 	.word	0x40013400
 8001c5c:	40014000 	.word	0x40014000
 8001c60:	40014400 	.word	0x40014400
 8001c64:	40014800 	.word	0x40014800
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800
 8001c70:	00010007 	.word	0x00010007

08001c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e0ff      	b.n	8001e92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b14      	cmp	r3, #20
 8001c9e:	f200 80f0 	bhi.w	8001e82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001ca2:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001cfd 	.word	0x08001cfd
 8001cac:	08001e83 	.word	0x08001e83
 8001cb0:	08001e83 	.word	0x08001e83
 8001cb4:	08001e83 	.word	0x08001e83
 8001cb8:	08001d3d 	.word	0x08001d3d
 8001cbc:	08001e83 	.word	0x08001e83
 8001cc0:	08001e83 	.word	0x08001e83
 8001cc4:	08001e83 	.word	0x08001e83
 8001cc8:	08001d7f 	.word	0x08001d7f
 8001ccc:	08001e83 	.word	0x08001e83
 8001cd0:	08001e83 	.word	0x08001e83
 8001cd4:	08001e83 	.word	0x08001e83
 8001cd8:	08001dbf 	.word	0x08001dbf
 8001cdc:	08001e83 	.word	0x08001e83
 8001ce0:	08001e83 	.word	0x08001e83
 8001ce4:	08001e83 	.word	0x08001e83
 8001ce8:	08001e01 	.word	0x08001e01
 8001cec:	08001e83 	.word	0x08001e83
 8001cf0:	08001e83 	.word	0x08001e83
 8001cf4:	08001e83 	.word	0x08001e83
 8001cf8:	08001e41 	.word	0x08001e41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fa54 	bl	80021b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0208 	orr.w	r2, r2, #8
 8001d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6999      	ldr	r1, [r3, #24]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	619a      	str	r2, [r3, #24]
      break;
 8001d3a:	e0a5      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fac4 	bl	80022d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6999      	ldr	r1, [r3, #24]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	021a      	lsls	r2, r3, #8
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	619a      	str	r2, [r3, #24]
      break;
 8001d7c:	e084      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68b9      	ldr	r1, [r7, #8]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fb2d 	bl	80023e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0208 	orr.w	r2, r2, #8
 8001d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0204 	bic.w	r2, r2, #4
 8001da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69d9      	ldr	r1, [r3, #28]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	61da      	str	r2, [r3, #28]
      break;
 8001dbc:	e064      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fb95 	bl	80024f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69d9      	ldr	r1, [r3, #28]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	021a      	lsls	r2, r3, #8
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	61da      	str	r2, [r3, #28]
      break;
 8001dfe:	e043      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fbfe 	bl	8002608 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0208 	orr.w	r2, r2, #8
 8001e1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0204 	bic.w	r2, r2, #4
 8001e2a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001e3e:	e023      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fc42 	bl	80026d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	021a      	lsls	r2, r3, #8
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001e80:	e002      	b.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
      break;
 8001e86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop

08001e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e0de      	b.n	8002076 <HAL_TIM_ConfigClockSource+0x1da>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8001ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a63      	ldr	r2, [pc, #396]	; (8002080 <HAL_TIM_ConfigClockSource+0x1e4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	f000 80a9 	beq.w	800204a <HAL_TIM_ConfigClockSource+0x1ae>
 8001ef8:	4a61      	ldr	r2, [pc, #388]	; (8002080 <HAL_TIM_ConfigClockSource+0x1e4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	f200 80ae 	bhi.w	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f00:	4a60      	ldr	r2, [pc, #384]	; (8002084 <HAL_TIM_ConfigClockSource+0x1e8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	f000 80a1 	beq.w	800204a <HAL_TIM_ConfigClockSource+0x1ae>
 8001f08:	4a5e      	ldr	r2, [pc, #376]	; (8002084 <HAL_TIM_ConfigClockSource+0x1e8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	f200 80a6 	bhi.w	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f10:	4a5d      	ldr	r2, [pc, #372]	; (8002088 <HAL_TIM_ConfigClockSource+0x1ec>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	f000 8099 	beq.w	800204a <HAL_TIM_ConfigClockSource+0x1ae>
 8001f18:	4a5b      	ldr	r2, [pc, #364]	; (8002088 <HAL_TIM_ConfigClockSource+0x1ec>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	f200 809e 	bhi.w	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f20:	4a5a      	ldr	r2, [pc, #360]	; (800208c <HAL_TIM_ConfigClockSource+0x1f0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	f000 8091 	beq.w	800204a <HAL_TIM_ConfigClockSource+0x1ae>
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_TIM_ConfigClockSource+0x1f0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	f200 8096 	bhi.w	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8001f34:	f000 8089 	beq.w	800204a <HAL_TIM_ConfigClockSource+0x1ae>
 8001f38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8001f3c:	f200 808e 	bhi.w	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f44:	d03e      	beq.n	8001fc4 <HAL_TIM_ConfigClockSource+0x128>
 8001f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f4a:	f200 8087 	bhi.w	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f52:	f000 8086 	beq.w	8002062 <HAL_TIM_ConfigClockSource+0x1c6>
 8001f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5a:	d87f      	bhi.n	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f5c:	2b70      	cmp	r3, #112	; 0x70
 8001f5e:	d01a      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0xfa>
 8001f60:	2b70      	cmp	r3, #112	; 0x70
 8001f62:	d87b      	bhi.n	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f64:	2b60      	cmp	r3, #96	; 0x60
 8001f66:	d050      	beq.n	800200a <HAL_TIM_ConfigClockSource+0x16e>
 8001f68:	2b60      	cmp	r3, #96	; 0x60
 8001f6a:	d877      	bhi.n	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f6c:	2b50      	cmp	r3, #80	; 0x50
 8001f6e:	d03c      	beq.n	8001fea <HAL_TIM_ConfigClockSource+0x14e>
 8001f70:	2b50      	cmp	r3, #80	; 0x50
 8001f72:	d873      	bhi.n	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d058      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x18e>
 8001f78:	2b40      	cmp	r3, #64	; 0x40
 8001f7a:	d86f      	bhi.n	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f7c:	2b30      	cmp	r3, #48	; 0x30
 8001f7e:	d064      	beq.n	800204a <HAL_TIM_ConfigClockSource+0x1ae>
 8001f80:	2b30      	cmp	r3, #48	; 0x30
 8001f82:	d86b      	bhi.n	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d060      	beq.n	800204a <HAL_TIM_ConfigClockSource+0x1ae>
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d867      	bhi.n	800205c <HAL_TIM_ConfigClockSource+0x1c0>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d05c      	beq.n	800204a <HAL_TIM_ConfigClockSource+0x1ae>
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d05a      	beq.n	800204a <HAL_TIM_ConfigClockSource+0x1ae>
 8001f94:	e062      	b.n	800205c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6899      	ldr	r1, [r3, #8]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f000 fc75 	bl	8002894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	609a      	str	r2, [r3, #8]
      break;
 8001fc2:	e04f      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6899      	ldr	r1, [r3, #8]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f000 fc5e 	bl	8002894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fe6:	609a      	str	r2, [r3, #8]
      break;
 8001fe8:	e03c      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f000 fbd0 	bl	800279c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2150      	movs	r1, #80	; 0x50
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fc29 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 8002008:	e02c      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	461a      	mov	r2, r3
 8002018:	f000 fbef 	bl	80027fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2160      	movs	r1, #96	; 0x60
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fc19 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 8002028:	e01c      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	461a      	mov	r2, r3
 8002038:	f000 fbb0 	bl	800279c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2140      	movs	r1, #64	; 0x40
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fc09 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 8002048:	e00c      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4619      	mov	r1, r3
 8002054:	4610      	mov	r0, r2
 8002056:	f000 fc00 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 800205a:	e003      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
      break;
 8002060:	e000      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	00100070 	.word	0x00100070
 8002084:	00100040 	.word	0x00100040
 8002088:	00100030 	.word	0x00100030
 800208c:	00100020 	.word	0x00100020

08002090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3c      	ldr	r2, [pc, #240]	; (8002194 <TIM_Base_SetConfig+0x104>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00f      	beq.n	80020c8 <TIM_Base_SetConfig+0x38>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d00b      	beq.n	80020c8 <TIM_Base_SetConfig+0x38>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a39      	ldr	r2, [pc, #228]	; (8002198 <TIM_Base_SetConfig+0x108>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <TIM_Base_SetConfig+0x38>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a38      	ldr	r2, [pc, #224]	; (800219c <TIM_Base_SetConfig+0x10c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d003      	beq.n	80020c8 <TIM_Base_SetConfig+0x38>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a37      	ldr	r2, [pc, #220]	; (80021a0 <TIM_Base_SetConfig+0x110>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d108      	bne.n	80020da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a2d      	ldr	r2, [pc, #180]	; (8002194 <TIM_Base_SetConfig+0x104>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01b      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e8:	d017      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2a      	ldr	r2, [pc, #168]	; (8002198 <TIM_Base_SetConfig+0x108>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a29      	ldr	r2, [pc, #164]	; (800219c <TIM_Base_SetConfig+0x10c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00f      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <TIM_Base_SetConfig+0x110>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00b      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <TIM_Base_SetConfig+0x114>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <TIM_Base_SetConfig+0x118>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d003      	beq.n	800211a <TIM_Base_SetConfig+0x8a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a25      	ldr	r2, [pc, #148]	; (80021ac <TIM_Base_SetConfig+0x11c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d108      	bne.n	800212c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <TIM_Base_SetConfig+0x104>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00f      	beq.n	8002178 <TIM_Base_SetConfig+0xe8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a11      	ldr	r2, [pc, #68]	; (80021a0 <TIM_Base_SetConfig+0x110>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00b      	beq.n	8002178 <TIM_Base_SetConfig+0xe8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <TIM_Base_SetConfig+0x114>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <TIM_Base_SetConfig+0xe8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <TIM_Base_SetConfig+0x118>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_Base_SetConfig+0xe8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <TIM_Base_SetConfig+0x11c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40012c00 	.word	0x40012c00
 8002198:	40000400 	.word	0x40000400
 800219c:	40000800 	.word	0x40000800
 80021a0:	40013400 	.word	0x40013400
 80021a4:	40014000 	.word	0x40014000
 80021a8:	40014400 	.word	0x40014400
 80021ac:	40014800 	.word	0x40014800

080021b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	f023 0201 	bic.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f023 0302 	bic.w	r3, r3, #2
 80021fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a2c      	ldr	r2, [pc, #176]	; (80022bc <TIM_OC1_SetConfig+0x10c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00f      	beq.n	8002230 <TIM_OC1_SetConfig+0x80>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a2b      	ldr	r2, [pc, #172]	; (80022c0 <TIM_OC1_SetConfig+0x110>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00b      	beq.n	8002230 <TIM_OC1_SetConfig+0x80>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <TIM_OC1_SetConfig+0x114>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d007      	beq.n	8002230 <TIM_OC1_SetConfig+0x80>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <TIM_OC1_SetConfig+0x118>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <TIM_OC1_SetConfig+0x80>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a28      	ldr	r2, [pc, #160]	; (80022cc <TIM_OC1_SetConfig+0x11c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d10c      	bne.n	800224a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f023 0308 	bic.w	r3, r3, #8
 8002236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <TIM_OC1_SetConfig+0x10c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00f      	beq.n	8002272 <TIM_OC1_SetConfig+0xc2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <TIM_OC1_SetConfig+0x110>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00b      	beq.n	8002272 <TIM_OC1_SetConfig+0xc2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <TIM_OC1_SetConfig+0x114>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <TIM_OC1_SetConfig+0xc2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <TIM_OC1_SetConfig+0x118>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <TIM_OC1_SetConfig+0xc2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <TIM_OC1_SetConfig+0x11c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d111      	bne.n	8002296 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	621a      	str	r2, [r3, #32]
}
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40013400 	.word	0x40013400
 80022c4:	40014000 	.word	0x40014000
 80022c8:	40014400 	.word	0x40014400
 80022cc:	40014800 	.word	0x40014800

080022d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f023 0210 	bic.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f023 0320 	bic.w	r3, r3, #32
 800231e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a28      	ldr	r2, [pc, #160]	; (80023d0 <TIM_OC2_SetConfig+0x100>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d003      	beq.n	800233c <TIM_OC2_SetConfig+0x6c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <TIM_OC2_SetConfig+0x104>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d10d      	bne.n	8002358 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <TIM_OC2_SetConfig+0x100>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00f      	beq.n	8002380 <TIM_OC2_SetConfig+0xb0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <TIM_OC2_SetConfig+0x104>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00b      	beq.n	8002380 <TIM_OC2_SetConfig+0xb0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <TIM_OC2_SetConfig+0x108>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <TIM_OC2_SetConfig+0xb0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <TIM_OC2_SetConfig+0x10c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d003      	beq.n	8002380 <TIM_OC2_SetConfig+0xb0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <TIM_OC2_SetConfig+0x110>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d113      	bne.n	80023a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800238e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	621a      	str	r2, [r3, #32]
}
 80023c2:	bf00      	nop
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40012c00 	.word	0x40012c00
 80023d4:	40013400 	.word	0x40013400
 80023d8:	40014000 	.word	0x40014000
 80023dc:	40014400 	.word	0x40014400
 80023e0:	40014800 	.word	0x40014800

080023e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <TIM_OC3_SetConfig+0xfc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d003      	beq.n	800244e <TIM_OC3_SetConfig+0x6a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <TIM_OC3_SetConfig+0x100>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10d      	bne.n	800246a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <TIM_OC3_SetConfig+0xfc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00f      	beq.n	8002492 <TIM_OC3_SetConfig+0xae>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <TIM_OC3_SetConfig+0x100>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00b      	beq.n	8002492 <TIM_OC3_SetConfig+0xae>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <TIM_OC3_SetConfig+0x104>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <TIM_OC3_SetConfig+0xae>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a19      	ldr	r2, [pc, #100]	; (80024ec <TIM_OC3_SetConfig+0x108>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d003      	beq.n	8002492 <TIM_OC3_SetConfig+0xae>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <TIM_OC3_SetConfig+0x10c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d113      	bne.n	80024ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	621a      	str	r2, [r3, #32]
}
 80024d4:	bf00      	nop
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40013400 	.word	0x40013400
 80024e8:	40014000 	.word	0x40014000
 80024ec:	40014400 	.word	0x40014400
 80024f0:	40014800 	.word	0x40014800

080024f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	031b      	lsls	r3, r3, #12
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a28      	ldr	r2, [pc, #160]	; (80025f4 <TIM_OC4_SetConfig+0x100>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_OC4_SetConfig+0x6c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <TIM_OC4_SetConfig+0x104>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d10d      	bne.n	800257c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	031b      	lsls	r3, r3, #12
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <TIM_OC4_SetConfig+0x100>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00f      	beq.n	80025a4 <TIM_OC4_SetConfig+0xb0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <TIM_OC4_SetConfig+0x104>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00b      	beq.n	80025a4 <TIM_OC4_SetConfig+0xb0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <TIM_OC4_SetConfig+0x108>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d007      	beq.n	80025a4 <TIM_OC4_SetConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <TIM_OC4_SetConfig+0x10c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d003      	beq.n	80025a4 <TIM_OC4_SetConfig+0xb0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a19      	ldr	r2, [pc, #100]	; (8002604 <TIM_OC4_SetConfig+0x110>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d113      	bne.n	80025cc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	621a      	str	r2, [r3, #32]
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40013400 	.word	0x40013400
 80025fc:	40014000 	.word	0x40014000
 8002600:	40014400 	.word	0x40014400
 8002604:	40014800 	.word	0x40014800

08002608 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800264c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a17      	ldr	r2, [pc, #92]	; (80026bc <TIM_OC5_SetConfig+0xb4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00f      	beq.n	8002682 <TIM_OC5_SetConfig+0x7a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a16      	ldr	r2, [pc, #88]	; (80026c0 <TIM_OC5_SetConfig+0xb8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00b      	beq.n	8002682 <TIM_OC5_SetConfig+0x7a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <TIM_OC5_SetConfig+0xbc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_OC5_SetConfig+0x7a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <TIM_OC5_SetConfig+0xc0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_OC5_SetConfig+0x7a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <TIM_OC5_SetConfig+0xc4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d109      	bne.n	8002696 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002688:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40013400 	.word	0x40013400
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800

080026d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	051b      	lsls	r3, r3, #20
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a18      	ldr	r2, [pc, #96]	; (8002788 <TIM_OC6_SetConfig+0xb8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d00f      	beq.n	800274c <TIM_OC6_SetConfig+0x7c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a17      	ldr	r2, [pc, #92]	; (800278c <TIM_OC6_SetConfig+0xbc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00b      	beq.n	800274c <TIM_OC6_SetConfig+0x7c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a16      	ldr	r2, [pc, #88]	; (8002790 <TIM_OC6_SetConfig+0xc0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <TIM_OC6_SetConfig+0x7c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <TIM_OC6_SetConfig+0xc4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d003      	beq.n	800274c <TIM_OC6_SetConfig+0x7c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <TIM_OC6_SetConfig+0xc8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d109      	bne.n	8002760 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002752:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	621a      	str	r2, [r3, #32]
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40013400 	.word	0x40013400
 8002790:	40014000 	.word	0x40014000
 8002794:	40014400 	.word	0x40014400
 8002798:	40014800 	.word	0x40014800

0800279c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f023 0201 	bic.w	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f023 030a 	bic.w	r3, r3, #10
 80027d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	621a      	str	r2, [r3, #32]
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f023 0210 	bic.w	r2, r3, #16
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	031b      	lsls	r3, r3, #12
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002836:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	f043 0307 	orr.w	r3, r3, #7
 8002880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	021a      	lsls	r2, r3, #8
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2201      	movs	r2, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a1a      	ldr	r2, [r3, #32]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	431a      	orrs	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002934:	2302      	movs	r3, #2
 8002936:	e065      	b.n	8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2c      	ldr	r2, [pc, #176]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d108      	bne.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d018      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d013      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d10c      	bne.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40013400 	.word	0x40013400
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40014000 	.word	0x40014000

08002a24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e087      	b.n	8002b50 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d004      	beq.n	8002ace <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d106      	bne.n	8002adc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d126      	bne.n	8002b3e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	051b      	lsls	r3, r3, #20
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d106      	bne.n	8002b3e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	40013400 	.word	0x40013400

08002b64 <memset>:
 8002b64:	4402      	add	r2, r0
 8002b66:	4603      	mov	r3, r0
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <memset+0xa>
 8002b6c:	4770      	bx	lr
 8002b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b72:	e7f9      	b.n	8002b68 <memset+0x4>

08002b74 <__libc_init_array>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	4d0d      	ldr	r5, [pc, #52]	; (8002bac <__libc_init_array+0x38>)
 8002b78:	4c0d      	ldr	r4, [pc, #52]	; (8002bb0 <__libc_init_array+0x3c>)
 8002b7a:	1b64      	subs	r4, r4, r5
 8002b7c:	10a4      	asrs	r4, r4, #2
 8002b7e:	2600      	movs	r6, #0
 8002b80:	42a6      	cmp	r6, r4
 8002b82:	d109      	bne.n	8002b98 <__libc_init_array+0x24>
 8002b84:	4d0b      	ldr	r5, [pc, #44]	; (8002bb4 <__libc_init_array+0x40>)
 8002b86:	4c0c      	ldr	r4, [pc, #48]	; (8002bb8 <__libc_init_array+0x44>)
 8002b88:	f000 f818 	bl	8002bbc <_init>
 8002b8c:	1b64      	subs	r4, r4, r5
 8002b8e:	10a4      	asrs	r4, r4, #2
 8002b90:	2600      	movs	r6, #0
 8002b92:	42a6      	cmp	r6, r4
 8002b94:	d105      	bne.n	8002ba2 <__libc_init_array+0x2e>
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
 8002b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9c:	4798      	blx	r3
 8002b9e:	3601      	adds	r6, #1
 8002ba0:	e7ee      	b.n	8002b80 <__libc_init_array+0xc>
 8002ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba6:	4798      	blx	r3
 8002ba8:	3601      	adds	r6, #1
 8002baa:	e7f2      	b.n	8002b92 <__libc_init_array+0x1e>
 8002bac:	08002be4 	.word	0x08002be4
 8002bb0:	08002be4 	.word	0x08002be4
 8002bb4:	08002be4 	.word	0x08002be4
 8002bb8:	08002be8 	.word	0x08002be8

08002bbc <_init>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	bf00      	nop
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr

08002bc8 <_fini>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	bf00      	nop
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr
