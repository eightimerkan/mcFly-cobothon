
new_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800388c  0800388c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800388c  0800388c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800388c  0800388c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800388c  0800388c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080038a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080038a0  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011479  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002185  00000000  00000000  000314f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00033680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c21  00000000  00000000  000345f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d4f6  00000000  00000000  00035211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ae4  00000000  00000000  00052707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1e8c  00000000  00000000  000641eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041b0  00000000  00000000  00126078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0012a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003864 	.word	0x08003864

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003864 	.word	0x08003864

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fbe0 	bl	80009e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f817 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9fd 	bl	8000624 <MX_GPIO_Init>
  MX_TIM1_Init();
 800022a:	f000 f85d 	bl	80002e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800022e:	f000 f90b 	bl	8000448 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000232:	f000 f97f 	bl	8000534 <MX_TIM3_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	 HAL_StatusTypeDef stat = HAL_UART_Receive(&huart2, &buffer, 1, 10);
 8000236:	1db9      	adds	r1, r7, #6
 8000238:	230a      	movs	r3, #10
 800023a:	2201      	movs	r2, #1
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <main+0x38>)
 800023e:	f002 fd4b 	bl	8002cd8 <HAL_UART_Receive>
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	 if (stat == HAL_OK)
	 {

	 }

	 HAL_Delay(10000);
 8000246:	f242 7010 	movw	r0, #10000	; 0x2710
 800024a:	f000 fc3b 	bl	8000ac4 <HAL_Delay>
  {
 800024e:	e7f2      	b.n	8000236 <main+0x1e>
 8000250:	2000010c 	.word	0x2000010c

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b094      	sub	sp, #80	; 0x50
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2238      	movs	r2, #56	; 0x38
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fad1 	bl	800380a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000276:	2000      	movs	r0, #0
 8000278:	f000 ff84 	bl	8001184 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027c:	2301      	movs	r3, #1
 800027e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028a:	2303      	movs	r3, #3
 800028c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800028e:	2306      	movs	r3, #6
 8000290:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000292:	2355      	movs	r3, #85	; 0x55
 8000294:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 f810 	bl	80012cc <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002b2:	f000 fa27 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ba:	2303      	movs	r3, #3
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2104      	movs	r1, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fb14 	bl	80018fc <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002da:	f000 fa13 	bl	8000704 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3750      	adds	r7, #80	; 0x50
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b09c      	sub	sp, #112	; 0x70
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000308:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
 8000318:	615a      	str	r2, [r3, #20]
 800031a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2234      	movs	r2, #52	; 0x34
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fa71 	bl	800380a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000328:	4b45      	ldr	r3, [pc, #276]	; (8000440 <MX_TIM1_Init+0x158>)
 800032a:	4a46      	ldr	r2, [pc, #280]	; (8000444 <MX_TIM1_Init+0x15c>)
 800032c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800032e:	4b44      	ldr	r3, [pc, #272]	; (8000440 <MX_TIM1_Init+0x158>)
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000334:	4b42      	ldr	r3, [pc, #264]	; (8000440 <MX_TIM1_Init+0x158>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800033a:	4b41      	ldr	r3, [pc, #260]	; (8000440 <MX_TIM1_Init+0x158>)
 800033c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	4b3f      	ldr	r3, [pc, #252]	; (8000440 <MX_TIM1_Init+0x158>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000348:	4b3d      	ldr	r3, [pc, #244]	; (8000440 <MX_TIM1_Init+0x158>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034e:	4b3c      	ldr	r3, [pc, #240]	; (8000440 <MX_TIM1_Init+0x158>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000354:	483a      	ldr	r0, [pc, #232]	; (8000440 <MX_TIM1_Init+0x158>)
 8000356:	f001 fcb5 	bl	8001cc4 <HAL_TIM_Base_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000360:	f000 f9d0 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800036a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800036e:	4619      	mov	r1, r3
 8000370:	4833      	ldr	r0, [pc, #204]	; (8000440 <MX_TIM1_Init+0x158>)
 8000372:	f001 fe73 	bl	800205c <HAL_TIM_ConfigClockSource>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800037c:	f000 f9c2 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000380:	482f      	ldr	r0, [pc, #188]	; (8000440 <MX_TIM1_Init+0x158>)
 8000382:	f001 fcf6 	bl	8001d72 <HAL_TIM_PWM_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800038c:	f000 f9ba 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	2300      	movs	r3, #0
 8000392:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000394:	2300      	movs	r3, #0
 8000396:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000398:	2300      	movs	r3, #0
 800039a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800039c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003a0:	4619      	mov	r1, r3
 80003a2:	4827      	ldr	r0, [pc, #156]	; (8000440 <MX_TIM1_Init+0x158>)
 80003a4:	f002 fb76 	bl	8002a94 <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80003ae:	f000 f9a9 	bl	8000704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b2:	2360      	movs	r3, #96	; 0x60
 80003b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80003ba:	2302      	movs	r3, #2
 80003bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003be:	2300      	movs	r3, #0
 80003c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003c6:	2300      	movs	r3, #0
 80003c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003ca:	2300      	movs	r3, #0
 80003cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003d2:	2200      	movs	r2, #0
 80003d4:	4619      	mov	r1, r3
 80003d6:	481a      	ldr	r0, [pc, #104]	; (8000440 <MX_TIM1_Init+0x158>)
 80003d8:	f001 fd2c 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80003e2:	f000 f98f 	bl	8000704 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000404:	2300      	movs	r3, #0
 8000406:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800040c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000410:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000416:	2300      	movs	r3, #0
 8000418:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4807      	ldr	r0, [pc, #28]	; (8000440 <MX_TIM1_Init+0x158>)
 8000424:	f002 fbb8 	bl	8002b98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800042e:	f000 f969 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000432:	4803      	ldr	r0, [pc, #12]	; (8000440 <MX_TIM1_Init+0x158>)
 8000434:	f000 f9d6 	bl	80007e4 <HAL_TIM_MspPostInit>

}
 8000438:	bf00      	nop
 800043a:	3770      	adds	r7, #112	; 0x70
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000028 	.word	0x20000028
 8000444:	40012c00 	.word	0x40012c00

08000448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08e      	sub	sp, #56	; 0x38
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045c:	f107 031c 	add.w	r3, r7, #28
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000468:	463b      	mov	r3, r7
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800047a:	4b2d      	ldr	r3, [pc, #180]	; (8000530 <MX_TIM2_Init+0xe8>)
 800047c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000480:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000482:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <MX_TIM2_Init+0xe8>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <MX_TIM2_Init+0xe8>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800048e:	4b28      	ldr	r3, [pc, #160]	; (8000530 <MX_TIM2_Init+0xe8>)
 8000490:	f04f 32ff 	mov.w	r2, #4294967295
 8000494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000496:	4b26      	ldr	r3, [pc, #152]	; (8000530 <MX_TIM2_Init+0xe8>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049c:	4b24      	ldr	r3, [pc, #144]	; (8000530 <MX_TIM2_Init+0xe8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004a2:	4823      	ldr	r0, [pc, #140]	; (8000530 <MX_TIM2_Init+0xe8>)
 80004a4:	f001 fc0e 	bl	8001cc4 <HAL_TIM_Base_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80004ae:	f000 f929 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004bc:	4619      	mov	r1, r3
 80004be:	481c      	ldr	r0, [pc, #112]	; (8000530 <MX_TIM2_Init+0xe8>)
 80004c0:	f001 fdcc 	bl	800205c <HAL_TIM_ConfigClockSource>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80004ca:	f000 f91b 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004ce:	4818      	ldr	r0, [pc, #96]	; (8000530 <MX_TIM2_Init+0xe8>)
 80004d0:	f001 fc4f 	bl	8001d72 <HAL_TIM_PWM_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80004da:	f000 f913 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e6:	f107 031c 	add.w	r3, r7, #28
 80004ea:	4619      	mov	r1, r3
 80004ec:	4810      	ldr	r0, [pc, #64]	; (8000530 <MX_TIM2_Init+0xe8>)
 80004ee:	f002 fad1 	bl	8002a94 <HAL_TIMEx_MasterConfigSynchronization>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80004f8:	f000 f904 	bl	8000704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004fc:	2360      	movs	r3, #96	; 0x60
 80004fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	4619      	mov	r1, r3
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <MX_TIM2_Init+0xe8>)
 8000514:	f001 fc8e 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800051e:	f000 f8f1 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <MX_TIM2_Init+0xe8>)
 8000524:	f000 f95e 	bl	80007e4 <HAL_TIM_MspPostInit>

}
 8000528:	bf00      	nop
 800052a:	3738      	adds	r7, #56	; 0x38
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000074 	.word	0x20000074

08000534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08e      	sub	sp, #56	; 0x38
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000548:	f107 031c 	add.w	r3, r7, #28
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000566:	4b2d      	ldr	r3, [pc, #180]	; (800061c <MX_TIM3_Init+0xe8>)
 8000568:	4a2d      	ldr	r2, [pc, #180]	; (8000620 <MX_TIM3_Init+0xec>)
 800056a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <MX_TIM3_Init+0xe8>)
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <MX_TIM3_Init+0xe8>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <MX_TIM3_Init+0xe8>)
 800057a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800057e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000580:	4b26      	ldr	r3, [pc, #152]	; (800061c <MX_TIM3_Init+0xe8>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <MX_TIM3_Init+0xe8>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800058c:	4823      	ldr	r0, [pc, #140]	; (800061c <MX_TIM3_Init+0xe8>)
 800058e:	f001 fb99 	bl	8001cc4 <HAL_TIM_Base_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000598:	f000 f8b4 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a6:	4619      	mov	r1, r3
 80005a8:	481c      	ldr	r0, [pc, #112]	; (800061c <MX_TIM3_Init+0xe8>)
 80005aa:	f001 fd57 	bl	800205c <HAL_TIM_ConfigClockSource>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80005b4:	f000 f8a6 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005b8:	4818      	ldr	r0, [pc, #96]	; (800061c <MX_TIM3_Init+0xe8>)
 80005ba:	f001 fbda 	bl	8001d72 <HAL_TIM_PWM_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80005c4:	f000 f89e 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4619      	mov	r1, r3
 80005d6:	4811      	ldr	r0, [pc, #68]	; (800061c <MX_TIM3_Init+0xe8>)
 80005d8:	f002 fa5c 	bl	8002a94 <HAL_TIMEx_MasterConfigSynchronization>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80005e2:	f000 f88f 	bl	8000704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e6:	2360      	movs	r3, #96	; 0x60
 80005e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <MX_TIM3_Init+0xe8>)
 80005fe:	f001 fc19 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000608:	f000 f87c 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <MX_TIM3_Init+0xe8>)
 800060e:	f000 f8e9 	bl	80007e4 <HAL_TIM_MspPostInit>

}
 8000612:	bf00      	nop
 8000614:	3738      	adds	r7, #56	; 0x38
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000c0 	.word	0x200000c0
 8000620:	40000400 	.word	0x40000400

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b30      	ldr	r3, [pc, #192]	; (80006fc <MX_GPIO_Init+0xd8>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a2f      	ldr	r2, [pc, #188]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a29      	ldr	r2, [pc, #164]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0320 	and.w	r3, r3, #32
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_GPIO_Init+0xd8>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a23      	ldr	r2, [pc, #140]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_GPIO_Init+0xd8>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006a0:	4817      	ldr	r0, [pc, #92]	; (8000700 <MX_GPIO_Init+0xdc>)
 80006a2:	f000 fd57 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 fd50 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006b4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <MX_GPIO_Init+0xdc>)
 80006ce:	f000 fbbf 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80006d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f000 fbaf 	bl	8000e50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	; 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000400 	.word	0x48000400

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x44>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x44>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6613      	str	r3, [r2, #96]	; 0x60
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x44>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x44>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x44>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6593      	str	r3, [r2, #88]	; 0x58
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x44>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000758:	b480      	push	{r7}
 800075a:	b087      	sub	sp, #28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <HAL_TIM_Base_MspInit+0x80>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d10c      	bne.n	8000784 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_TIM_Base_MspInit+0x84>)
 800076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076e:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <HAL_TIM_Base_MspInit+0x84>)
 8000770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000774:	6613      	str	r3, [r2, #96]	; 0x60
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <HAL_TIM_Base_MspInit+0x84>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000782:	e022      	b.n	80007ca <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800078c:	d10c      	bne.n	80007a8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <HAL_TIM_Base_MspInit+0x84>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <HAL_TIM_Base_MspInit+0x84>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6593      	str	r3, [r2, #88]	; 0x58
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_TIM_Base_MspInit+0x84>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
}
 80007a6:	e010      	b.n	80007ca <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <HAL_TIM_Base_MspInit+0x88>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10b      	bne.n	80007ca <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_TIM_Base_MspInit+0x84>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <HAL_TIM_Base_MspInit+0x84>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6593      	str	r3, [r2, #88]	; 0x58
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <HAL_TIM_Base_MspInit+0x84>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
}
 80007ca:	bf00      	nop
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40000400 	.word	0x40000400

080007e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a3c      	ldr	r2, [pc, #240]	; (80008f4 <HAL_TIM_MspPostInit+0x110>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d12d      	bne.n	8000862 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <HAL_TIM_MspPostInit+0x114>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a3b      	ldr	r2, [pc, #236]	; (80008f8 <HAL_TIM_MspPostInit+0x114>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <HAL_TIM_MspPostInit+0x114>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000830:	2304      	movs	r3, #4
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4830      	ldr	r0, [pc, #192]	; (80008fc <HAL_TIM_MspPostInit+0x118>)
 800083c:	f000 fb08 	bl	8000e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000840:	2301      	movs	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000850:	2302      	movs	r3, #2
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4828      	ldr	r0, [pc, #160]	; (80008fc <HAL_TIM_MspPostInit+0x118>)
 800085c:	f000 faf8 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000860:	e044      	b.n	80008ec <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM2)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800086a:	d11d      	bne.n	80008a8 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <HAL_TIM_MspPostInit+0x114>)
 800086e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <HAL_TIM_MspPostInit+0x114>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_TIM_MspPostInit+0x114>)
 800087a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000884:	2301      	movs	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000894:	2301      	movs	r3, #1
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 fad5 	bl	8000e50 <HAL_GPIO_Init>
}
 80008a6:	e021      	b.n	80008ec <HAL_TIM_MspPostInit+0x108>
  else if(htim->Instance==TIM3)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_TIM_MspPostInit+0x11c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d11c      	bne.n	80008ec <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_TIM_MspPostInit+0x114>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <HAL_TIM_MspPostInit+0x114>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_TIM_MspPostInit+0x114>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008da:	2302      	movs	r3, #2
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e8:	f000 fab2 	bl	8000e50 <HAL_GPIO_Init>
}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40012c00 	.word	0x40012c00
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000800 	.word	0x48000800
 8000900:	40000400 	.word	0x40000400

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f89a 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <USART2_IRQHandler+0x10>)
 800095e:	f002 fa8f 	bl	8002e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000010c 	.word	0x2000010c

0800096c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000992:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490e      	ldr	r1, [pc, #56]	; (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0b      	ldr	r4, [pc, #44]	; (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ba:	f7ff ffd7 	bl	800096c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009be:	f002 ff2d 	bl	800381c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c2:	f7ff fc29 	bl	8000218 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   r0, =_estack
 80009c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d4:	08003894 	.word	0x08003894
  ldr r2, =_sbss
 80009d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009dc:	200001a0 	.word	0x200001a0

080009e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_2_IRQHandler>

080009e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f93d 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f80e 	bl	8000a14 <HAL_InitTick>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	e001      	b.n	8000a08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a04:	f7ff fe84 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a08:	79fb      	ldrb	r3, [r7, #7]

}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_InitTick+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d022      	beq.n	8000a6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_InitTick+0x6c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_InitTick+0x68>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f93a 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10f      	bne.n	8000a68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d809      	bhi.n	8000a62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295
 8000a56:	f000 f914 	bl	8000c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_InitTick+0x70>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	e007      	b.n	8000a72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e004      	b.n	8000a72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e001      	b.n	8000a72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a98:	6013      	str	r3, [r2, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	2000019c 	.word	0x2000019c
 8000aa8:	20000008 	.word	0x20000008

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	2000019c 	.word	0x2000019c

08000ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff ffee 	bl	8000aac <HAL_GetTick>
 8000ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000adc:	d004      	beq.n	8000ae8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_Delay+0x40>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae8:	bf00      	nop
 8000aea:	f7ff ffdf 	bl	8000aac <HAL_GetTick>
 8000aee:	4602      	mov	r2, r0
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d8f7      	bhi.n	8000aea <HAL_Delay+0x26>
  {
  }
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000008 	.word	0x20000008

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	60d3      	str	r3, [r2, #12]
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff47 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff5e 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff90 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5f 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffb2 	bl	8000c28 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d005      	beq.n	8000cf2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2204      	movs	r2, #4
 8000cea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e037      	b.n	8000d62 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 020e 	bic.w	r2, r2, #14
 8000d00:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d10:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 0201 	bic.w	r2, r2, #1
 8000d20:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f003 021f 	and.w	r2, r3, #31
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f202 	lsl.w	r2, r1, r2
 8000d34:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d3e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00c      	beq.n	8000d62 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d56:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d60:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d00d      	beq.n	8000db4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e047      	b.n	8000e44 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 020e 	bic.w	r2, r2, #14
 8000dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0201 	bic.w	r2, r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000de2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	2101      	movs	r1, #1
 8000df2:	fa01 f202 	lsl.w	r2, r1, r2
 8000df6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00c      	beq.n	8000e24 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	4798      	blx	r3
    }
  }
  return status;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e5e:	e15a      	b.n	8001116 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 814c 	beq.w	8001110 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d005      	beq.n	8000e90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 0201 	and.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d017      	beq.n	8000f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d123      	bne.n	8000f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	6939      	ldr	r1, [r7, #16]
 8000f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0203 	and.w	r2, r3, #3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80a6 	beq.w	8001110 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc4:	4b5b      	ldr	r3, [pc, #364]	; (8001134 <HAL_GPIO_Init+0x2e4>)
 8000fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc8:	4a5a      	ldr	r2, [pc, #360]	; (8001134 <HAL_GPIO_Init+0x2e4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd0:	4b58      	ldr	r3, [pc, #352]	; (8001134 <HAL_GPIO_Init+0x2e4>)
 8000fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fdc:	4a56      	ldr	r2, [pc, #344]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001006:	d01f      	beq.n	8001048 <HAL_GPIO_Init+0x1f8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4c      	ldr	r2, [pc, #304]	; (800113c <HAL_GPIO_Init+0x2ec>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d019      	beq.n	8001044 <HAL_GPIO_Init+0x1f4>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <HAL_GPIO_Init+0x2f0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d013      	beq.n	8001040 <HAL_GPIO_Init+0x1f0>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4a      	ldr	r2, [pc, #296]	; (8001144 <HAL_GPIO_Init+0x2f4>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d00d      	beq.n	800103c <HAL_GPIO_Init+0x1ec>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a49      	ldr	r2, [pc, #292]	; (8001148 <HAL_GPIO_Init+0x2f8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x1e8>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a48      	ldr	r2, [pc, #288]	; (800114c <HAL_GPIO_Init+0x2fc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_GPIO_Init+0x1e4>
 8001030:	2305      	movs	r3, #5
 8001032:	e00a      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001034:	2306      	movs	r3, #6
 8001036:	e008      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001038:	2304      	movs	r3, #4
 800103a:	e006      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 800103c:	2303      	movs	r3, #3
 800103e:	e004      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001040:	2302      	movs	r3, #2
 8001042:	e002      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <HAL_GPIO_Init+0x1fa>
 8001048:	2300      	movs	r3, #0
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	f002 0203 	and.w	r2, r2, #3
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	4093      	lsls	r3, r2
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105a:	4937      	ldr	r1, [pc, #220]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001068:	4b39      	ldr	r3, [pc, #228]	; (8001150 <HAL_GPIO_Init+0x300>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800108c:	4a30      	ldr	r2, [pc, #192]	; (8001150 <HAL_GPIO_Init+0x300>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001092:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_GPIO_Init+0x300>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010b6:	4a26      	ldr	r2, [pc, #152]	; (8001150 <HAL_GPIO_Init+0x300>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <HAL_GPIO_Init+0x300>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_GPIO_Init+0x300>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_GPIO_Init+0x300>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_GPIO_Init+0x300>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	f47f ae9d 	bne.w	8000e60 <HAL_GPIO_Init+0x10>
  }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000
 800113c:	48000400 	.word	0x48000400
 8001140:	48000800 	.word	0x48000800
 8001144:	48000c00 	.word	0x48000c00
 8001148:	48001000 	.word	0x48001000
 800114c:	48001400 	.word	0x48001400
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001170:	e002      	b.n	8001178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d141      	bne.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001192:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800119a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119e:	d131      	bne.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a0:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011a6:	4a46      	ldr	r2, [pc, #280]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b8:	4a41      	ldr	r2, [pc, #260]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2232      	movs	r2, #50	; 0x32
 80011c6:	fb02 f303 	mul.w	r3, r2, r3
 80011ca:	4a3f      	ldr	r2, [pc, #252]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	3301      	adds	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d6:	e002      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3b01      	subs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ea:	d102      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f2      	bne.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d158      	bne.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e057      	b.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800120a:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001214:	e04d      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800121c:	d141      	bne.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800122a:	d131      	bne.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800122c:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001232:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001244:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2232      	movs	r2, #50	; 0x32
 8001252:	fb02 f303 	mul.w	r3, r2, r3
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	0c9b      	lsrs	r3, r3, #18
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001262:	e002      	b.n	800126a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3b01      	subs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001276:	d102      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f2      	bne.n	8001264 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	d112      	bne.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e011      	b.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012a0:	e007      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40007000 	.word	0x40007000
 80012c4:	20000000 	.word	0x20000000
 80012c8:	431bde83 	.word	0x431bde83

080012cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e306      	b.n	80018ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d075      	beq.n	80013d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ea:	4b97      	ldr	r3, [pc, #604]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f4:	4b94      	ldr	r3, [pc, #592]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b0c      	cmp	r3, #12
 8001302:	d102      	bne.n	800130a <HAL_RCC_OscConfig+0x3e>
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d002      	beq.n	8001310 <HAL_RCC_OscConfig+0x44>
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d10b      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	4b8d      	ldr	r3, [pc, #564]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d05b      	beq.n	80013d4 <HAL_RCC_OscConfig+0x108>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d157      	bne.n	80013d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e2e1      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x74>
 8001332:	4b85      	ldr	r3, [pc, #532]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a84      	ldr	r2, [pc, #528]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e01d      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x98>
 800134a:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7e      	ldr	r2, [pc, #504]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b7c      	ldr	r3, [pc, #496]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7b      	ldr	r2, [pc, #492]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001364:	4b78      	ldr	r3, [pc, #480]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a77      	ldr	r2, [pc, #476]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b75      	ldr	r3, [pc, #468]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a74      	ldr	r2, [pc, #464]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fb92 	bl	8000aac <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fb8e 	bl	8000aac <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e2a6      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800139e:	4b6a      	ldr	r3, [pc, #424]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0xc0>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fb7e 	bl	8000aac <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fb7a 	bl	8000aac <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e292      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c6:	4b60      	ldr	r3, [pc, #384]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0xe8>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d075      	beq.n	80014ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e2:	4b59      	ldr	r3, [pc, #356]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ec:	4b56      	ldr	r3, [pc, #344]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b0c      	cmp	r3, #12
 80013fa:	d102      	bne.n	8001402 <HAL_RCC_OscConfig+0x136>
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d002      	beq.n	8001408 <HAL_RCC_OscConfig+0x13c>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b04      	cmp	r3, #4
 8001406:	d11f      	bne.n	8001448 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001408:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_RCC_OscConfig+0x154>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e265      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b49      	ldr	r3, [pc, #292]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	4946      	ldr	r1, [pc, #280]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001434:	4b45      	ldr	r3, [pc, #276]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff faeb 	bl	8000a14 <HAL_InitTick>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d043      	beq.n	80014cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e251      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d023      	beq.n	8001498 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001450:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a3c      	ldr	r2, [pc, #240]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fb26 	bl	8000aac <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fb22 	bl	8000aac <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e23a      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	061b      	lsls	r3, r3, #24
 8001490:	492d      	ldr	r1, [pc, #180]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
 8001496:	e01a      	b.n	80014ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 800149e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb02 	bl	8000aac <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fafe 	bl	8000aac <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e216      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x1e0>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d041      	beq.n	800155e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01c      	beq.n	800151c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 80014e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e8:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f2:	f7ff fadb 	bl	8000aac <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fad7 	bl	8000aac <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1ef      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 800150e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0ef      	beq.n	80014fa <HAL_RCC_OscConfig+0x22e>
 800151a:	e020      	b.n	800155e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 800151e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_RCC_OscConfig+0x27c>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fabe 	bl	8000aac <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001532:	e00d      	b.n	8001550 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff faba 	bl	8000aac <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d906      	bls.n	8001550 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1d2      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001550:	4b8c      	ldr	r3, [pc, #560]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ea      	bne.n	8001534 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80a6 	beq.w	80016b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001570:	4b84      	ldr	r3, [pc, #528]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x2b4>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x2b6>
 8001580:	2300      	movs	r3, #0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00d      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b7f      	ldr	r3, [pc, #508]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	4a7e      	ldr	r2, [pc, #504]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6593      	str	r3, [r2, #88]	; 0x58
 8001592:	4b7c      	ldr	r3, [pc, #496]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800159e:	2301      	movs	r3, #1
 80015a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a2:	4b79      	ldr	r3, [pc, #484]	; (8001788 <HAL_RCC_OscConfig+0x4bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d118      	bne.n	80015e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ae:	4b76      	ldr	r3, [pc, #472]	; (8001788 <HAL_RCC_OscConfig+0x4bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a75      	ldr	r2, [pc, #468]	; (8001788 <HAL_RCC_OscConfig+0x4bc>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fa77 	bl	8000aac <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff fa73 	bl	8000aac <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e18b      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d4:	4b6c      	ldr	r3, [pc, #432]	; (8001788 <HAL_RCC_OscConfig+0x4bc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d108      	bne.n	80015fa <HAL_RCC_OscConfig+0x32e>
 80015e8:	4b66      	ldr	r3, [pc, #408]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 80015ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ee:	4a65      	ldr	r2, [pc, #404]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f8:	e024      	b.n	8001644 <HAL_RCC_OscConfig+0x378>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d110      	bne.n	8001624 <HAL_RCC_OscConfig+0x358>
 8001602:	4b60      	ldr	r3, [pc, #384]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001608:	4a5e      	ldr	r2, [pc, #376]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001612:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001618:	4a5a      	ldr	r2, [pc, #360]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001622:	e00f      	b.n	8001644 <HAL_RCC_OscConfig+0x378>
 8001624:	4b57      	ldr	r3, [pc, #348]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	4a56      	ldr	r2, [pc, #344]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001634:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163a:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d016      	beq.n	800167a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fa2e 	bl	8000aac <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff fa2a 	bl	8000aac <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e140      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166a:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 800166c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ed      	beq.n	8001654 <HAL_RCC_OscConfig+0x388>
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167a:	f7ff fa17 	bl	8000aac <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fa13 	bl	8000aac <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e129      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001698:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1ed      	bne.n	8001682 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d105      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b0:	4a34      	ldr	r2, [pc, #208]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 80016b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d03c      	beq.n	800173e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01c      	beq.n	8001706 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 80016ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016d2:	4a2c      	ldr	r2, [pc, #176]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff f9e6 	bl	8000aac <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016e4:	f7ff f9e2 	bl	8000aac <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0fa      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 80016f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ef      	beq.n	80016e4 <HAL_RCC_OscConfig+0x418>
 8001704:	e01b      	b.n	800173e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff f9c9 	bl	8000aac <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800171e:	f7ff f9c5 	bl	8000aac <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0dd      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ef      	bne.n	800171e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80d1 	beq.w	80018ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b0c      	cmp	r3, #12
 8001752:	f000 808b 	beq.w	800186c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d15e      	bne.n	800181c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_RCC_OscConfig+0x4b8>)
 8001764:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff f99f 	bl	8000aac <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001770:	e00c      	b.n	800178c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff f99b 	bl	8000aac <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d905      	bls.n	800178c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0b3      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
 8001784:	40021000 	.word	0x40021000
 8001788:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ec      	bne.n	8001772 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001798:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_OscConfig+0x62c>)
 800179e:	4013      	ands	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6a11      	ldr	r1, [r2, #32]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a8:	3a01      	subs	r2, #1
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	4311      	orrs	r1, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017b2:	0212      	lsls	r2, r2, #8
 80017b4:	4311      	orrs	r1, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017ba:	0852      	lsrs	r2, r2, #1
 80017bc:	3a01      	subs	r2, #1
 80017be:	0552      	lsls	r2, r2, #21
 80017c0:	4311      	orrs	r1, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017c6:	0852      	lsrs	r2, r2, #1
 80017c8:	3a01      	subs	r2, #1
 80017ca:	0652      	lsls	r2, r2, #25
 80017cc:	4311      	orrs	r1, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017d2:	06d2      	lsls	r2, r2, #27
 80017d4:	430a      	orrs	r2, r1
 80017d6:	4947      	ldr	r1, [pc, #284]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017dc:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a44      	ldr	r2, [pc, #272]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e8:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4a41      	ldr	r2, [pc, #260]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 80017ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff f95a 	bl	8000aac <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f956 	bl	8000aac <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e06e      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180e:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x530>
 800181a:	e066      	b.n	80018ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a34      	ldr	r2, [pc, #208]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 8001822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001826:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001828:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 800183a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff f932 	bl	8000aac <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff f92e 	bl	8000aac <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e046      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x580>
 800186a:	e03e      	b.n	80018ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e039      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_OscConfig+0x628>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	429a      	cmp	r2, r3
 800188a:	d12c      	bne.n	80018e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	3b01      	subs	r3, #1
 8001898:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d123      	bne.n	80018e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d11b      	bne.n	80018e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d113      	bne.n	80018e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	3b01      	subs	r3, #1
 80018e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	019f800c 	.word	0x019f800c

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e11e      	b.n	8001b52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b91      	ldr	r3, [pc, #580]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b8e      	ldr	r3, [pc, #568]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 020f 	bic.w	r2, r3, #15
 800192a:	498c      	ldr	r1, [pc, #560]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b8a      	ldr	r3, [pc, #552]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e106      	b.n	8001b52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d073      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d129      	bne.n	80019ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001958:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0f4      	b.n	8001b52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001968:	f000 f966 	bl	8001c38 <RCC_GetSysClockFreqFromPLLSource>
 800196c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4a7c      	ldr	r2, [pc, #496]	; (8001b64 <HAL_RCC_ClockConfig+0x268>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d93f      	bls.n	80019f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001976:	4b7a      	ldr	r3, [pc, #488]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800198a:	2b00      	cmp	r3, #0
 800198c:	d033      	beq.n	80019f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001992:	2b00      	cmp	r3, #0
 8001994:	d12f      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001996:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800199e:	4a70      	ldr	r2, [pc, #448]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e024      	b.n	80019f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b4:	4b6a      	ldr	r3, [pc, #424]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0c6      	b.n	8001b52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c4:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0be      	b.n	8001b52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019d4:	f000 f8ce 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4a61      	ldr	r2, [pc, #388]	; (8001b64 <HAL_RCC_ClockConfig+0x268>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d909      	bls.n	80019f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019e2:	4b5f      	ldr	r3, [pc, #380]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ea:	4a5d      	ldr	r2, [pc, #372]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4957      	ldr	r1, [pc, #348]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a08:	f7ff f850 	bl	8000aac <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff f84c 	bl	8000aac <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e095      	b.n	8001b52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a42      	ldr	r2, [pc, #264]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a70:	4a3b      	ldr	r2, [pc, #236]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4936      	ldr	r1, [pc, #216]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2b80      	cmp	r3, #128	; 0x80
 8001a90:	d105      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d21d      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 020f 	bic.w	r2, r3, #15
 8001ab4:	4929      	ldr	r1, [pc, #164]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001abc:	f7fe fff6 	bl	8000aac <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7fe fff2 	bl	8000aac <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e03b      	b.n	8001b52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x260>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1ed      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4917      	ldr	r1, [pc, #92]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	490f      	ldr	r1, [pc, #60]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b26:	f000 f825 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_RCC_ClockConfig+0x264>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	490c      	ldr	r1, [pc, #48]	; (8001b68 <HAL_RCC_ClockConfig+0x26c>)
 8001b38:	5ccb      	ldrb	r3, [r1, r3]
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x274>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe ff62 	bl	8000a14 <HAL_InitTick>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	04c4b400 	.word	0x04c4b400
 8001b68:	0800387c 	.word	0x0800387c
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e047      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b98:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	e03e      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b9e:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d136      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	4a16      	ldr	r2, [pc, #88]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd2:	68d2      	ldr	r2, [r2, #12]
 8001bd4:	0a12      	lsrs	r2, r2, #8
 8001bd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	617b      	str	r3, [r7, #20]
      break;
 8001be0:	e00c      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001be2:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bec:	68d2      	ldr	r2, [r2, #12]
 8001bee:	0a12      	lsrs	r2, r2, #8
 8001bf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bf4:	fb02 f303 	mul.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
      break;
 8001bfa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0e5b      	lsrs	r3, r3, #25
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	3301      	adds	r3, #1
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	e001      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c1c:	693b      	ldr	r3, [r7, #16]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	00f42400 	.word	0x00f42400
 8001c34:	016e3600 	.word	0x016e3600

08001c38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d10c      	bne.n	8001c76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c66:	68d2      	ldr	r2, [r2, #12]
 8001c68:	0a12      	lsrs	r2, r2, #8
 8001c6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
    break;
 8001c74:	e00c      	b.n	8001c90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c80:	68d2      	ldr	r2, [r2, #12]
 8001c82:	0a12      	lsrs	r2, r2, #8
 8001c84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    break;
 8001c8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0e5b      	lsrs	r3, r3, #25
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001caa:	687b      	ldr	r3, [r7, #4]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	016e3600 	.word	0x016e3600
 8001cc0:	00f42400 	.word	0x00f42400

08001cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e049      	b.n	8001d6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fd34 	bl	8000758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 faa4 	bl	8002250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e049      	b.n	8001e18 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d106      	bne.n	8001d9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f841 	bl	8001e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4610      	mov	r0, r2
 8001db2:	f000 fa4d 	bl	8002250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0ff      	b.n	8002052 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b14      	cmp	r3, #20
 8001e5e:	f200 80f0 	bhi.w	8002042 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001ebd 	.word	0x08001ebd
 8001e6c:	08002043 	.word	0x08002043
 8001e70:	08002043 	.word	0x08002043
 8001e74:	08002043 	.word	0x08002043
 8001e78:	08001efd 	.word	0x08001efd
 8001e7c:	08002043 	.word	0x08002043
 8001e80:	08002043 	.word	0x08002043
 8001e84:	08002043 	.word	0x08002043
 8001e88:	08001f3f 	.word	0x08001f3f
 8001e8c:	08002043 	.word	0x08002043
 8001e90:	08002043 	.word	0x08002043
 8001e94:	08002043 	.word	0x08002043
 8001e98:	08001f7f 	.word	0x08001f7f
 8001e9c:	08002043 	.word	0x08002043
 8001ea0:	08002043 	.word	0x08002043
 8001ea4:	08002043 	.word	0x08002043
 8001ea8:	08001fc1 	.word	0x08001fc1
 8001eac:	08002043 	.word	0x08002043
 8001eb0:	08002043 	.word	0x08002043
 8001eb4:	08002043 	.word	0x08002043
 8001eb8:	08002001 	.word	0x08002001
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fa54 	bl	8002370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0208 	orr.w	r2, r2, #8
 8001ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0204 	bic.w	r2, r2, #4
 8001ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6999      	ldr	r1, [r3, #24]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	619a      	str	r2, [r3, #24]
      break;
 8001efa:	e0a5      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fac4 	bl	8002490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6999      	ldr	r1, [r3, #24]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	021a      	lsls	r2, r3, #8
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	619a      	str	r2, [r3, #24]
      break;
 8001f3c:	e084      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fb2d 	bl	80025a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0208 	orr.w	r2, r2, #8
 8001f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0204 	bic.w	r2, r2, #4
 8001f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69d9      	ldr	r1, [r3, #28]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	61da      	str	r2, [r3, #28]
      break;
 8001f7c:	e064      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fb95 	bl	80026b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69da      	ldr	r2, [r3, #28]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69d9      	ldr	r1, [r3, #28]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	021a      	lsls	r2, r3, #8
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	61da      	str	r2, [r3, #28]
      break;
 8001fbe:	e043      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fbfe 	bl	80027c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0208 	orr.w	r2, r2, #8
 8001fda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0204 	bic.w	r2, r2, #4
 8001fea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001ffe:	e023      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fc42 	bl	8002890 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800201a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	021a      	lsls	r2, r3, #8
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002040:	e002      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
      break;
 8002046:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002050:	7dfb      	ldrb	r3, [r7, #23]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop

0800205c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_TIM_ConfigClockSource+0x1c>
 8002074:	2302      	movs	r3, #2
 8002076:	e0de      	b.n	8002236 <HAL_TIM_ConfigClockSource+0x1da>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800209a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a63      	ldr	r2, [pc, #396]	; (8002240 <HAL_TIM_ConfigClockSource+0x1e4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	f000 80a9 	beq.w	800220a <HAL_TIM_ConfigClockSource+0x1ae>
 80020b8:	4a61      	ldr	r2, [pc, #388]	; (8002240 <HAL_TIM_ConfigClockSource+0x1e4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	f200 80ae 	bhi.w	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 80020c0:	4a60      	ldr	r2, [pc, #384]	; (8002244 <HAL_TIM_ConfigClockSource+0x1e8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	f000 80a1 	beq.w	800220a <HAL_TIM_ConfigClockSource+0x1ae>
 80020c8:	4a5e      	ldr	r2, [pc, #376]	; (8002244 <HAL_TIM_ConfigClockSource+0x1e8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	f200 80a6 	bhi.w	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 80020d0:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <HAL_TIM_ConfigClockSource+0x1ec>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	f000 8099 	beq.w	800220a <HAL_TIM_ConfigClockSource+0x1ae>
 80020d8:	4a5b      	ldr	r2, [pc, #364]	; (8002248 <HAL_TIM_ConfigClockSource+0x1ec>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	f200 809e 	bhi.w	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 80020e0:	4a5a      	ldr	r2, [pc, #360]	; (800224c <HAL_TIM_ConfigClockSource+0x1f0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	f000 8091 	beq.w	800220a <HAL_TIM_ConfigClockSource+0x1ae>
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_TIM_ConfigClockSource+0x1f0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	f200 8096 	bhi.w	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 80020f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80020f4:	f000 8089 	beq.w	800220a <HAL_TIM_ConfigClockSource+0x1ae>
 80020f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80020fc:	f200 808e 	bhi.w	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 8002100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002104:	d03e      	beq.n	8002184 <HAL_TIM_ConfigClockSource+0x128>
 8002106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210a:	f200 8087 	bhi.w	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 800210e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002112:	f000 8086 	beq.w	8002222 <HAL_TIM_ConfigClockSource+0x1c6>
 8002116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211a:	d87f      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 800211c:	2b70      	cmp	r3, #112	; 0x70
 800211e:	d01a      	beq.n	8002156 <HAL_TIM_ConfigClockSource+0xfa>
 8002120:	2b70      	cmp	r3, #112	; 0x70
 8002122:	d87b      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 8002124:	2b60      	cmp	r3, #96	; 0x60
 8002126:	d050      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0x16e>
 8002128:	2b60      	cmp	r3, #96	; 0x60
 800212a:	d877      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 800212c:	2b50      	cmp	r3, #80	; 0x50
 800212e:	d03c      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0x14e>
 8002130:	2b50      	cmp	r3, #80	; 0x50
 8002132:	d873      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d058      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x18e>
 8002138:	2b40      	cmp	r3, #64	; 0x40
 800213a:	d86f      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 800213c:	2b30      	cmp	r3, #48	; 0x30
 800213e:	d064      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x1ae>
 8002140:	2b30      	cmp	r3, #48	; 0x30
 8002142:	d86b      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 8002144:	2b20      	cmp	r3, #32
 8002146:	d060      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x1ae>
 8002148:	2b20      	cmp	r3, #32
 800214a:	d867      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x1c0>
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05c      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x1ae>
 8002150:	2b10      	cmp	r3, #16
 8002152:	d05a      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x1ae>
 8002154:	e062      	b.n	800221c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6899      	ldr	r1, [r3, #8]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f000 fc75 	bl	8002a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	609a      	str	r2, [r3, #8]
      break;
 8002182:	e04f      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6899      	ldr	r1, [r3, #8]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f000 fc5e 	bl	8002a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a6:	609a      	str	r2, [r3, #8]
      break;
 80021a8:	e03c      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6859      	ldr	r1, [r3, #4]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f000 fbd0 	bl	800295c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2150      	movs	r1, #80	; 0x50
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fc29 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 80021c8:	e02c      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6859      	ldr	r1, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f000 fbef 	bl	80029ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2160      	movs	r1, #96	; 0x60
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fc19 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 80021e8:	e01c      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6859      	ldr	r1, [r3, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f000 fbb0 	bl	800295c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2140      	movs	r1, #64	; 0x40
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fc09 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 8002208:	e00c      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f000 fc00 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 800221a:	e003      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      break;
 8002220:	e000      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	00100070 	.word	0x00100070
 8002244:	00100040 	.word	0x00100040
 8002248:	00100030 	.word	0x00100030
 800224c:	00100020 	.word	0x00100020

08002250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <TIM_Base_SetConfig+0x104>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00f      	beq.n	8002288 <TIM_Base_SetConfig+0x38>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226e:	d00b      	beq.n	8002288 <TIM_Base_SetConfig+0x38>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a39      	ldr	r2, [pc, #228]	; (8002358 <TIM_Base_SetConfig+0x108>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <TIM_Base_SetConfig+0x38>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a38      	ldr	r2, [pc, #224]	; (800235c <TIM_Base_SetConfig+0x10c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d003      	beq.n	8002288 <TIM_Base_SetConfig+0x38>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a37      	ldr	r2, [pc, #220]	; (8002360 <TIM_Base_SetConfig+0x110>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d108      	bne.n	800229a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2d      	ldr	r2, [pc, #180]	; (8002354 <TIM_Base_SetConfig+0x104>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01b      	beq.n	80022da <TIM_Base_SetConfig+0x8a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d017      	beq.n	80022da <TIM_Base_SetConfig+0x8a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2a      	ldr	r2, [pc, #168]	; (8002358 <TIM_Base_SetConfig+0x108>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <TIM_Base_SetConfig+0x8a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <TIM_Base_SetConfig+0x10c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00f      	beq.n	80022da <TIM_Base_SetConfig+0x8a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a28      	ldr	r2, [pc, #160]	; (8002360 <TIM_Base_SetConfig+0x110>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00b      	beq.n	80022da <TIM_Base_SetConfig+0x8a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a27      	ldr	r2, [pc, #156]	; (8002364 <TIM_Base_SetConfig+0x114>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <TIM_Base_SetConfig+0x8a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <TIM_Base_SetConfig+0x118>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <TIM_Base_SetConfig+0x8a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a25      	ldr	r2, [pc, #148]	; (800236c <TIM_Base_SetConfig+0x11c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d108      	bne.n	80022ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a10      	ldr	r2, [pc, #64]	; (8002354 <TIM_Base_SetConfig+0x104>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00f      	beq.n	8002338 <TIM_Base_SetConfig+0xe8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a11      	ldr	r2, [pc, #68]	; (8002360 <TIM_Base_SetConfig+0x110>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00b      	beq.n	8002338 <TIM_Base_SetConfig+0xe8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <TIM_Base_SetConfig+0x114>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d007      	beq.n	8002338 <TIM_Base_SetConfig+0xe8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <TIM_Base_SetConfig+0x118>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d003      	beq.n	8002338 <TIM_Base_SetConfig+0xe8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0e      	ldr	r2, [pc, #56]	; (800236c <TIM_Base_SetConfig+0x11c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d103      	bne.n	8002340 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	615a      	str	r2, [r3, #20]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40000400 	.word	0x40000400
 800235c:	40000800 	.word	0x40000800
 8002360:	40013400 	.word	0x40013400
 8002364:	40014000 	.word	0x40014000
 8002368:	40014400 	.word	0x40014400
 800236c:	40014800 	.word	0x40014800

08002370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	f023 0201 	bic.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f023 0302 	bic.w	r3, r3, #2
 80023bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a2c      	ldr	r2, [pc, #176]	; (800247c <TIM_OC1_SetConfig+0x10c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00f      	beq.n	80023f0 <TIM_OC1_SetConfig+0x80>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <TIM_OC1_SetConfig+0x110>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00b      	beq.n	80023f0 <TIM_OC1_SetConfig+0x80>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <TIM_OC1_SetConfig+0x114>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <TIM_OC1_SetConfig+0x80>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <TIM_OC1_SetConfig+0x118>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d003      	beq.n	80023f0 <TIM_OC1_SetConfig+0x80>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a28      	ldr	r2, [pc, #160]	; (800248c <TIM_OC1_SetConfig+0x11c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d10c      	bne.n	800240a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f023 0308 	bic.w	r3, r3, #8
 80023f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <TIM_OC1_SetConfig+0x10c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00f      	beq.n	8002432 <TIM_OC1_SetConfig+0xc2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <TIM_OC1_SetConfig+0x110>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <TIM_OC1_SetConfig+0xc2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a19      	ldr	r2, [pc, #100]	; (8002484 <TIM_OC1_SetConfig+0x114>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <TIM_OC1_SetConfig+0xc2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a18      	ldr	r2, [pc, #96]	; (8002488 <TIM_OC1_SetConfig+0x118>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_OC1_SetConfig+0xc2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a17      	ldr	r2, [pc, #92]	; (800248c <TIM_OC1_SetConfig+0x11c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d111      	bne.n	8002456 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	621a      	str	r2, [r3, #32]
}
 8002470:	bf00      	nop
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40013400 	.word	0x40013400
 8002484:	40014000 	.word	0x40014000
 8002488:	40014400 	.word	0x40014400
 800248c:	40014800 	.word	0x40014800

08002490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f023 0210 	bic.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f023 0320 	bic.w	r3, r3, #32
 80024de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a28      	ldr	r2, [pc, #160]	; (8002590 <TIM_OC2_SetConfig+0x100>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d003      	beq.n	80024fc <TIM_OC2_SetConfig+0x6c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a27      	ldr	r2, [pc, #156]	; (8002594 <TIM_OC2_SetConfig+0x104>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d10d      	bne.n	8002518 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002516:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <TIM_OC2_SetConfig+0x100>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00f      	beq.n	8002540 <TIM_OC2_SetConfig+0xb0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <TIM_OC2_SetConfig+0x104>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00b      	beq.n	8002540 <TIM_OC2_SetConfig+0xb0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <TIM_OC2_SetConfig+0x108>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <TIM_OC2_SetConfig+0xb0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a1a      	ldr	r2, [pc, #104]	; (800259c <TIM_OC2_SetConfig+0x10c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d003      	beq.n	8002540 <TIM_OC2_SetConfig+0xb0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <TIM_OC2_SetConfig+0x110>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d113      	bne.n	8002568 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800254e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	621a      	str	r2, [r3, #32]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40013400 	.word	0x40013400
 8002598:	40014000 	.word	0x40014000
 800259c:	40014400 	.word	0x40014400
 80025a0:	40014800 	.word	0x40014800

080025a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <TIM_OC3_SetConfig+0xfc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <TIM_OC3_SetConfig+0x6a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <TIM_OC3_SetConfig+0x100>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10d      	bne.n	800262a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <TIM_OC3_SetConfig+0xfc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00f      	beq.n	8002652 <TIM_OC3_SetConfig+0xae>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <TIM_OC3_SetConfig+0x100>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00b      	beq.n	8002652 <TIM_OC3_SetConfig+0xae>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <TIM_OC3_SetConfig+0x104>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <TIM_OC3_SetConfig+0xae>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a19      	ldr	r2, [pc, #100]	; (80026ac <TIM_OC3_SetConfig+0x108>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_OC3_SetConfig+0xae>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <TIM_OC3_SetConfig+0x10c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d113      	bne.n	800267a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	621a      	str	r2, [r3, #32]
}
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40013400 	.word	0x40013400
 80026a8:	40014000 	.word	0x40014000
 80026ac:	40014400 	.word	0x40014400
 80026b0:	40014800 	.word	0x40014800

080026b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	031b      	lsls	r3, r3, #12
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <TIM_OC4_SetConfig+0x100>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d003      	beq.n	8002720 <TIM_OC4_SetConfig+0x6c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <TIM_OC4_SetConfig+0x104>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d10d      	bne.n	800273c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	031b      	lsls	r3, r3, #12
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800273a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <TIM_OC4_SetConfig+0x100>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00f      	beq.n	8002764 <TIM_OC4_SetConfig+0xb0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <TIM_OC4_SetConfig+0x104>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00b      	beq.n	8002764 <TIM_OC4_SetConfig+0xb0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <TIM_OC4_SetConfig+0x108>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <TIM_OC4_SetConfig+0xb0>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <TIM_OC4_SetConfig+0x10c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <TIM_OC4_SetConfig+0xb0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <TIM_OC4_SetConfig+0x110>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d113      	bne.n	800278c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800276a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002772:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40013400 	.word	0x40013400
 80027bc:	40014000 	.word	0x40014000
 80027c0:	40014400 	.word	0x40014400
 80027c4:	40014800 	.word	0x40014800

080027c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800280c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a17      	ldr	r2, [pc, #92]	; (800287c <TIM_OC5_SetConfig+0xb4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00f      	beq.n	8002842 <TIM_OC5_SetConfig+0x7a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a16      	ldr	r2, [pc, #88]	; (8002880 <TIM_OC5_SetConfig+0xb8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00b      	beq.n	8002842 <TIM_OC5_SetConfig+0x7a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a15      	ldr	r2, [pc, #84]	; (8002884 <TIM_OC5_SetConfig+0xbc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <TIM_OC5_SetConfig+0x7a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <TIM_OC5_SetConfig+0xc0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d003      	beq.n	8002842 <TIM_OC5_SetConfig+0x7a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a13      	ldr	r2, [pc, #76]	; (800288c <TIM_OC5_SetConfig+0xc4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d109      	bne.n	8002856 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	621a      	str	r2, [r3, #32]
}
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40013400 	.word	0x40013400
 8002884:	40014000 	.word	0x40014000
 8002888:	40014400 	.word	0x40014400
 800288c:	40014800 	.word	0x40014800

08002890 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	051b      	lsls	r3, r3, #20
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a18      	ldr	r2, [pc, #96]	; (8002948 <TIM_OC6_SetConfig+0xb8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00f      	beq.n	800290c <TIM_OC6_SetConfig+0x7c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a17      	ldr	r2, [pc, #92]	; (800294c <TIM_OC6_SetConfig+0xbc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00b      	beq.n	800290c <TIM_OC6_SetConfig+0x7c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <TIM_OC6_SetConfig+0xc0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <TIM_OC6_SetConfig+0x7c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a15      	ldr	r2, [pc, #84]	; (8002954 <TIM_OC6_SetConfig+0xc4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d003      	beq.n	800290c <TIM_OC6_SetConfig+0x7c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a14      	ldr	r2, [pc, #80]	; (8002958 <TIM_OC6_SetConfig+0xc8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d109      	bne.n	8002920 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002912:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	029b      	lsls	r3, r3, #10
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	621a      	str	r2, [r3, #32]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40013400 	.word	0x40013400
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800

0800295c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f023 0201 	bic.w	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f023 030a 	bic.w	r3, r3, #10
 8002998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	621a      	str	r2, [r3, #32]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b087      	sub	sp, #28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0210 	bic.w	r2, r3, #16
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	031b      	lsls	r3, r3, #12
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b085      	sub	sp, #20
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f043 0307 	orr.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	021a      	lsls	r2, r3, #8
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e065      	b.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2c      	ldr	r2, [pc, #176]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ae6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d018      	beq.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b22:	d013      	beq.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a18      	ldr	r2, [pc, #96]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00e      	beq.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d009      	beq.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10c      	bne.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40013400 	.word	0x40013400
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40014000 	.word	0x40014000

08002b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e087      	b.n	8002cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d106      	bne.n	8002c50 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d126      	bne.n	8002cb2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	051b      	lsls	r3, r3, #20
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d106      	bne.n	8002cb2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40012c00 	.word	0x40012c00
 8002cd4:	40013400 	.word	0x40013400

08002cd8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	f040 80c0 	bne.w	8002e74 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_UART_Receive+0x28>
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b8      	b.n	8002e76 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Receive+0x3a>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e0b1      	b.n	8002e76 <HAL_UART_Receive+0x19e>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2222      	movs	r2, #34	; 0x22
 8002d26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d30:	f7fd febc 	bl	8000aac <HAL_GetTick>
 8002d34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	88fa      	ldrh	r2, [r7, #6]
 8002d42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4e:	d10e      	bne.n	8002d6e <HAL_UART_Receive+0x96>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_UART_Receive+0x8c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d62:	e02d      	b.n	8002dc0 <HAL_UART_Receive+0xe8>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	22ff      	movs	r2, #255	; 0xff
 8002d68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d6c:	e028      	b.n	8002dc0 <HAL_UART_Receive+0xe8>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10d      	bne.n	8002d92 <HAL_UART_Receive+0xba>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d104      	bne.n	8002d88 <HAL_UART_Receive+0xb0>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	22ff      	movs	r2, #255	; 0xff
 8002d82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d86:	e01b      	b.n	8002dc0 <HAL_UART_Receive+0xe8>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	227f      	movs	r2, #127	; 0x7f
 8002d8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002d90:	e016      	b.n	8002dc0 <HAL_UART_Receive+0xe8>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d9a:	d10d      	bne.n	8002db8 <HAL_UART_Receive+0xe0>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <HAL_UART_Receive+0xd6>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	227f      	movs	r2, #127	; 0x7f
 8002da8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002dac:	e008      	b.n	8002dc0 <HAL_UART_Receive+0xe8>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	223f      	movs	r2, #63	; 0x3f
 8002db2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002db6:	e003      	b.n	8002dc0 <HAL_UART_Receive+0xe8>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002dc6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd0:	d108      	bne.n	8002de4 <HAL_UART_Receive+0x10c>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	e003      	b.n	8002dec <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002df4:	e032      	b.n	8002e5c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2120      	movs	r1, #32
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fb75 	bl	80034f0 <UART_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e032      	b.n	8002e76 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10c      	bne.n	8002e30 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	8a7b      	ldrh	r3, [r7, #18]
 8002e20:	4013      	ands	r3, r2
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e00c      	b.n	8002e4a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	8a7b      	ldrh	r3, [r7, #18]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1c6      	bne.n	8002df6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b0ba      	sub	sp, #232	; 0xe8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002eaa:	f640 030f 	movw	r3, #2063	; 0x80f
 8002eae:	4013      	ands	r3, r2
 8002eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d11b      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d015      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 82d6 	beq.w	8003496 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
      }
      return;
 8002ef2:	e2d0      	b.n	8003496 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 811f 	beq.w	800313c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002efe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f02:	4b8b      	ldr	r3, [pc, #556]	; (8003130 <HAL_UART_IRQHandler+0x2b0>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f0e:	4b89      	ldr	r3, [pc, #548]	; (8003134 <HAL_UART_IRQHandler+0x2b4>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8112 	beq.w	800313c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d011      	beq.n	8002f48 <HAL_UART_IRQHandler+0xc8>
 8002f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2201      	movs	r2, #1
 8002f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d011      	beq.n	8002f78 <HAL_UART_IRQHandler+0xf8>
 8002f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2202      	movs	r2, #2
 8002f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f6e:	f043 0204 	orr.w	r2, r3, #4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d011      	beq.n	8002fa8 <HAL_UART_IRQHandler+0x128>
 8002f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2204      	movs	r2, #4
 8002f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f9e:	f043 0202 	orr.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d017      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d105      	bne.n	8002fcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002fc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002fc4:	4b5a      	ldr	r3, [pc, #360]	; (8003130 <HAL_UART_IRQHandler+0x2b0>)
 8002fc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fda:	f043 0208 	orr.w	r2, r3, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <HAL_UART_IRQHandler+0x196>
 8002ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00c      	beq.n	8003016 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 823c 	beq.w	800349a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d013      	beq.n	8003056 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800302e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d105      	bne.n	8003046 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800303a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800305c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d005      	beq.n	800307a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800306e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003072:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04f      	beq.n	800311a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fb00 	bl	8003680 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b40      	cmp	r3, #64	; 0x40
 800308c:	d141      	bne.n	8003112 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3308      	adds	r3, #8
 8003094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3308      	adds	r3, #8
 80030b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1d9      	bne.n	800308e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d013      	beq.n	800310a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e6:	4a14      	ldr	r2, [pc, #80]	; (8003138 <HAL_UART_IRQHandler+0x2b8>)
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fe46 	bl	8000d80 <HAL_DMA_Abort_IT>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d017      	beq.n	800312a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003104:	4610      	mov	r0, r2
 8003106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003108:	e00f      	b.n	800312a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9da 	bl	80034c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	e00b      	b.n	800312a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9d6 	bl	80034c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003118:	e007      	b.n	800312a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f9d2 	bl	80034c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003128:	e1b7      	b.n	800349a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312a:	bf00      	nop
    return;
 800312c:	e1b5      	b.n	800349a <HAL_UART_IRQHandler+0x61a>
 800312e:	bf00      	nop
 8003130:	10000001 	.word	0x10000001
 8003134:	04000120 	.word	0x04000120
 8003138:	0800374d 	.word	0x0800374d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 814a 	bne.w	80033da <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8143 	beq.w	80033da <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 813c 	beq.w	80033da <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2210      	movs	r2, #16
 8003168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	f040 80b5 	bne.w	80032e4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003186:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8187 	beq.w	800349e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800319a:	429a      	cmp	r2, r3
 800319c:	f080 817f 	bcs.w	800349e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 8086 	bne.w	80032c8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1da      	bne.n	80031bc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3308      	adds	r3, #8
 800320c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3308      	adds	r3, #8
 8003226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800322a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800322e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800323c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e1      	bne.n	8003206 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3308      	adds	r3, #8
 8003248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3308      	adds	r3, #8
 8003262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800326c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003298:	f023 0310 	bic.w	r3, r3, #16
 800329c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80032ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e4      	bne.n	8003288 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd fd03 	bl	8000cce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	4619      	mov	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f8fb 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032e2:	e0dc      	b.n	800349e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80ce 	beq.w	80034a2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80c9 	beq.w	80034a2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003332:	647b      	str	r3, [r7, #68]	; 0x44
 8003334:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e4      	bne.n	8003310 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3308      	adds	r3, #8
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	623b      	str	r3, [r7, #32]
   return(result);
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3308      	adds	r3, #8
 800336a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800336e:	633a      	str	r2, [r7, #48]	; 0x30
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e1      	bne.n	8003346 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0310 	bic.w	r3, r3, #16
 80033aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	69b9      	ldr	r1, [r7, #24]
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	617b      	str	r3, [r7, #20]
   return(result);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e4      	bne.n	8003396 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f880 	bl	80034d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033d8:	e063      	b.n	80034a2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00e      	beq.n	8003404 <HAL_UART_IRQHandler+0x584>
 80033e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f9e6 	bl	80037ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003402:	e051      	b.n	80034a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d014      	beq.n	800343a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800341c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342c:	2b00      	cmp	r3, #0
 800342e:	d03a      	beq.n	80034a6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
    }
    return;
 8003438:	e035      	b.n	80034a6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_UART_IRQHandler+0x5da>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f990 	bl	8003778 <UART_EndTransmit_IT>
    return;
 8003458:	e026      	b.n	80034a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_UART_IRQHandler+0x5fa>
 8003466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9bf 	bl	80037f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003478:	e016      	b.n	80034a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <HAL_UART_IRQHandler+0x628>
 8003486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348a:	2b00      	cmp	r3, #0
 800348c:	da0c      	bge.n	80034a8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9a7 	bl	80037e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003494:	e008      	b.n	80034a8 <HAL_UART_IRQHandler+0x628>
      return;
 8003496:	bf00      	nop
 8003498:	e006      	b.n	80034a8 <HAL_UART_IRQHandler+0x628>
    return;
 800349a:	bf00      	nop
 800349c:	e004      	b.n	80034a8 <HAL_UART_IRQHandler+0x628>
      return;
 800349e:	bf00      	nop
 80034a0:	e002      	b.n	80034a8 <HAL_UART_IRQHandler+0x628>
      return;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <HAL_UART_IRQHandler+0x628>
    return;
 80034a6:	bf00      	nop
  }
}
 80034a8:	37e8      	adds	r7, #232	; 0xe8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop

080034b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b09c      	sub	sp, #112	; 0x70
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003500:	e0a9      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	f000 80a5 	beq.w	8003656 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fd face 	bl	8000aac <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <UART_WaitOnFlagUntilTimeout+0x32>
 800351c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800351e:	2b00      	cmp	r3, #0
 8003520:	d140      	bne.n	80035a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003536:	667b      	str	r3, [r7, #100]	; 0x64
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003542:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003546:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800354e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e6      	bne.n	8003522 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3308      	adds	r3, #8
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	663b      	str	r3, [r7, #96]	; 0x60
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3308      	adds	r3, #8
 8003572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003574:	64ba      	str	r2, [r7, #72]	; 0x48
 8003576:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800357a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e5      	bne.n	8003554 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e069      	b.n	8003678 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d051      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c0:	d149      	bne.n	8003656 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
 80035ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e6      	bne.n	80035cc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3308      	adds	r3, #8
 8003604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	613b      	str	r3, [r7, #16]
   return(result);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	66bb      	str	r3, [r7, #104]	; 0x68
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3308      	adds	r3, #8
 800361c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800361e:	623a      	str	r2, [r7, #32]
 8003620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	69f9      	ldr	r1, [r7, #28]
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	61bb      	str	r3, [r7, #24]
   return(result);
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e5      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e010      	b.n	8003678 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	429a      	cmp	r2, r3
 8003672:	f43f af46 	beq.w	8003502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3770      	adds	r7, #112	; 0x70
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b095      	sub	sp, #84	; 0x54
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800369c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
 80036a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e6      	bne.n	8003688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3308      	adds	r3, #8
 80036c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3308      	adds	r3, #8
 80036dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e3      	bne.n	80036ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d118      	bne.n	800372c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	60bb      	str	r3, [r7, #8]
   return(result);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 0310 	bic.w	r3, r3, #16
 800370e:	647b      	str	r3, [r7, #68]	; 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6979      	ldr	r1, [r7, #20]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	613b      	str	r3, [r7, #16]
   return(result);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e6      	bne.n	80036fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003740:	bf00      	nop
 8003742:	3754      	adds	r7, #84	; 0x54
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff feaa 	bl	80034c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	60bb      	str	r3, [r7, #8]
   return(result);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	61bb      	str	r3, [r7, #24]
 80037a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	6979      	ldr	r1, [r7, #20]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	613b      	str	r3, [r7, #16]
   return(result);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e6      	bne.n	8003780 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fe75 	bl	80034b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037c6:	bf00      	nop
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <memset>:
 800380a:	4402      	add	r2, r0
 800380c:	4603      	mov	r3, r0
 800380e:	4293      	cmp	r3, r2
 8003810:	d100      	bne.n	8003814 <memset+0xa>
 8003812:	4770      	bx	lr
 8003814:	f803 1b01 	strb.w	r1, [r3], #1
 8003818:	e7f9      	b.n	800380e <memset+0x4>
	...

0800381c <__libc_init_array>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	4d0d      	ldr	r5, [pc, #52]	; (8003854 <__libc_init_array+0x38>)
 8003820:	4c0d      	ldr	r4, [pc, #52]	; (8003858 <__libc_init_array+0x3c>)
 8003822:	1b64      	subs	r4, r4, r5
 8003824:	10a4      	asrs	r4, r4, #2
 8003826:	2600      	movs	r6, #0
 8003828:	42a6      	cmp	r6, r4
 800382a:	d109      	bne.n	8003840 <__libc_init_array+0x24>
 800382c:	4d0b      	ldr	r5, [pc, #44]	; (800385c <__libc_init_array+0x40>)
 800382e:	4c0c      	ldr	r4, [pc, #48]	; (8003860 <__libc_init_array+0x44>)
 8003830:	f000 f818 	bl	8003864 <_init>
 8003834:	1b64      	subs	r4, r4, r5
 8003836:	10a4      	asrs	r4, r4, #2
 8003838:	2600      	movs	r6, #0
 800383a:	42a6      	cmp	r6, r4
 800383c:	d105      	bne.n	800384a <__libc_init_array+0x2e>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	f855 3b04 	ldr.w	r3, [r5], #4
 8003844:	4798      	blx	r3
 8003846:	3601      	adds	r6, #1
 8003848:	e7ee      	b.n	8003828 <__libc_init_array+0xc>
 800384a:	f855 3b04 	ldr.w	r3, [r5], #4
 800384e:	4798      	blx	r3
 8003850:	3601      	adds	r6, #1
 8003852:	e7f2      	b.n	800383a <__libc_init_array+0x1e>
 8003854:	0800388c 	.word	0x0800388c
 8003858:	0800388c 	.word	0x0800388c
 800385c:	0800388c 	.word	0x0800388c
 8003860:	08003890 	.word	0x08003890

08003864 <_init>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr

08003870 <_fini>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr
